{"version":3,"sources":["serviceWorker.ts","definitions/result-codes.ts","api/enum.ts","redux/reducers/ui-reducer/ui-reducer.ts","utils/errorUtils.ts","api/api.ts","redux/reducers/todolist-reducer/todolists-reducer.ts","redux/reducers/task-reducer/tasks-reducer.ts","redux/reducers/theme-reducer/theme-reducer.ts","redux/reducers/auth-reducer/auth-reducer.ts","redux/store/store.ts","Components/common/ErrorSnackbar/ErrorSnackbar.tsx","Components/login/Login.tsx","Components/utils/PageNotFound/PageNotFound.tsx","themes/themes.ts","Components/common/AddItemInput/AddItemInput.tsx","Components/common/EditableSpan/EditableSpan.tsx","Components/taskItem/TaskItem.tsx","hooks/useTaskCRUD.ts","Components/todolist/Todolist.tsx","hooks/useTasksFilter.ts","utils/tasksForRender.ts","Components/common/ToggleTheme/ToggleTheme.tsx","hooks/useTodolistCRUD.ts","Components/main/Main.tsx","Components/common/CircularProgress/CircularProgress.tsx","App.tsx","index.tsx","Components/utils/PageNotFound/PageNotFound.module.css"],"names":["Boolean","window","location","hostname","match","resultCodes","TaskStatuses","TaskPriorities","slice","createSlice","name","initialState","initializeStatus","operationStatus","progress","error","reducers","setInitializedApp","state","action","payload","setProgress","setOperationStatus","setUiError","uiReducer","reducer","actions","handleServerNetworkError","dispatch","message","handleServerAppError","response","messages","length","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","data","title","post","id","delete","todolistID","put","putAfterItemId","taskAPI","taskID","model","authAPI","setTodolists","todolists","map","tl","entityStatus","filter","removeTodoList","index","findIndex","splice","addTodoList","unshift","renameTodoList","changeFilterTodoList","changeTodolistEntityStatus","todoListsReducer","getTodolists","a","console","log","forEach","ts","getTasks","createAsyncThunk","thunk","tasks","items","updateTask","param","changes","getState","currentTask","find","t","deleteTask","addNewTask","newTask","task","status","New","modifyTask","changeTaskEntityStatus","entityTaskStatus","extraReducers","builder","addCase","fulfilled","tasksReducer","toggleTheme","isDarkTheme","type","isLoggedIn","setIsLoggedIn","value","authReducer","rootReducer","combineReducers","todoLists","ui","theme","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useSelector","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","memo","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resultCode","success","resetForm","Grid","container","display","alignItems","justifyContent","style","minHeight","backgroundColor","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","FormControlLabel","control","Checkbox","Button","color","disabled","isValid","dirty","PageNotFound","className","s","topHeader","starsec","starthird","starfourth","starfifth","lamp__wrap","lamp","cable","cover","inCover","bulb","light","error__content","error__message","message__title","lightTheme","createTheme","palette","mode","primary","main","secondary","typography","button","textTransform","components","MuiContainer","defaultProps","maxWidth","MuiPaper","styleOverrides","elevation8","position","padding","cursor","elevation1","MuiList","MuiButton","MuiTypography","h6","darkTheme","MuiListItem","AddItemInput","addItem","placeHolder","useState","newTaskTittle","setNewTaskTittle","setError","addItemHandler","useCallback","trimmedTitle","trim","onChangeHandler","e","currentTarget","onKeyPressHandler","key","size","helperText","onChange","onKeyPress","IconButton","onClick","AddBoxOutlined","EditableSpan","renameItem","editMode","setEditMode","input","setInput","onDoubleClickHandler","onBlurHandler","onBlur","autoFocus","Typography","onDoubleClick","align","noWrap","component","TaskItem","removeTask","renameTask","changeTaskStatus","todoListID","renameTaskHandler","newTitle","handleChangeCheckboxValue","isDoneValue","checked","Completed","removeTaskHandler","ListItem","Delete","useTaskCRUD","handleTaskRemove","handleTaskAdd","addTask","handleTaskRename","handleTaskStatusChange","useMemo","Todolist","removeTodolist","renameTodolist","filterTdl","handleFilterAllClick","handleFilterActiveClick","handleFilterCompletedClick","useTasksFilter","tasksJSX","tasksForRender","Paper","buttonStatusClass","Box","marginBottom","List","bottom","ButtonGroup","marginLeft","ToggleTheme","onClickHandler","useTodolistCRUD","handleTodolistAdd","CreateTodolist","handleTodolistRemove","handleTodolistRename","Main","toggleThemeHandler","logoutHandler","useEffect","currentID","useRef","handleDragStart","current","handleDragEnd","opacity","handleDragOVer","preventDefault","handleOnDrop","reorderTodolists","todoListRender","tdl","draggable","onDragStart","onDragLeave","onDragEnd","onDragOver","onDrop","AppBar","Toolbar","Logout","height","LinearProgress","Container","spacing","CircularProgressWithLabel","top","left","right","CircularProgress","Math","round","App","setLocalStorageThemeHandler","localStorage","setItem","JSON","stringify","getLocalStorageThemeHandler","localTheme","getItem","parse","useLayoutEffect","timer","setInterval","clearInterval","ThemeProvider","ReactDOM","render","path","element","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.3fee1cda.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum resultCodes {\r\n    success,\r\n    error,\r\n    captcha,\r\n}","export enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgently,\r\n    Later,\r\n}","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {SetInitializedAppType, SetOperationStatusType, SetProgressType, SetUiErrorType} from \"./types\";\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'ui',\r\n    initialState: {\r\n        initializeStatus: false,\r\n        operationStatus: \"idle\",\r\n        progress: 0,\r\n        error: ''\r\n    },\r\n    reducers: {\r\n        setInitializedApp(state, action: SetInitializedAppType) {\r\n            state.initializeStatus = action.payload.initializeStatus\r\n        },\r\n        setProgress(state, action: SetProgressType) {\r\n            state.progress = action.payload.progress\r\n        },\r\n        setOperationStatus(state, action: SetOperationStatusType) {\r\n            state.operationStatus = action.payload.operationStatus\r\n        },\r\n        setUiError(state, action: SetUiErrorType) {\r\n            state.error = action.payload.error\r\n        },\r\n    }\r\n})\r\n\r\nexport const uiReducer = slice.reducer\r\n\r\nexport const {setInitializedApp,setProgress,setOperationStatus,setUiError} = slice.actions\r\n\r\n\r\n// export const uiReducer = (state: InitialStateType = initialState, action: UiReducerActionsTypes): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'UI/SET-INITIALIZED-APP':\r\n//             return {\r\n//                 ...state,\r\n//                 initializeStatus: action.initializeStatus\r\n//             }\r\n//         case 'UI/SET-PROGRESS':\r\n//             return {\r\n//                 ...state,\r\n//                 progress: action.progress\r\n//             }\r\n//         case \"UI/SET-OPERATION-STATUS\":\r\n//             return {\r\n//                 ...state,\r\n//                 operationStatus: action.operationStatus\r\n//             }\r\n//         case \"UI/SET-Error\":\r\n//             return {\r\n//                 ...state,\r\n//                 error:action.error\r\n//             }\r\n//         default:\r\n//             return state\r\n//     }\r\n//\r\n// }\r\n\r\n\r\n\r\n","import {DispatchType} from \"../redux/store/store\";\r\nimport {CommonResponseType} from \"../api\";\r\nimport {setOperationStatus, setUiError} from \"../redux/reducers/ui-reducer/ui-reducer\";\r\nimport {ThunkActionDispatch} from \"redux-thunk\";\r\n\r\nexport  const handleServerNetworkError = (dispatch:ThunkActionDispatch<DispatchType>, message:string) => {\r\n    dispatch(setUiError({error:message}))\r\n    dispatch(setOperationStatus({operationStatus:\"failed\"}))\r\n}\r\n\r\nexport  const handleServerAppError = <T> (dispatch:ThunkActionDispatch<DispatchType>, response:CommonResponseType<T>) => {\r\n    if (response.messages.length) {\r\n        dispatch(setUiError({error: response.messages[0]}))\r\n    } else {\r\n        dispatch(setUiError({error:'some error'}))\r\n    }\r\n    dispatch(setOperationStatus({operationStatus:\"succeeded\"}))\r\n}","import axios from \"axios\";\r\nimport {\r\n    AuthMeResponseType,\r\n    CommonResponseType,\r\n    LoginParamsType,\r\n    TaskType,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from \"./types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    headers: {\r\n        \"API-KEY\": \"5c2085d8-160d-4f26-bb1a-d16aa4a1e991\"\r\n    }\r\n})\r\n\r\nexport const todolistAPI = {\r\n    async getTodolists() {\r\n        const response = await instance.get<TodolistType[]>(`/todo-lists`)\r\n        return response.data\r\n    },\r\n    async createTodolist(title: string) {\r\n        const response = await instance.post<CommonResponseType<{ item: TodolistType }>>(\r\n            `/todo-lists`,\r\n            {title})\r\n        return response.data\r\n    },\r\n    async removeTodolist(id: string) {\r\n        const response = await instance.delete<CommonResponseType<{}>>(`/todo-lists/${id}`)\r\n        return response.data\r\n    },\r\n    async renameTodolist(todolistID: string, title: string) {\r\n        const response = await instance.put<CommonResponseType<{}>>(\r\n            `/todo-lists/${todolistID}`,\r\n            {title})\r\n        return response.data\r\n    },\r\n    async reorderTodoList(todolistID: string, putAfterItemId: string) {\r\n        const response = await instance.put<CommonResponseType<{}>>(\r\n            `/todo-lists/${todolistID}/reorder`,\r\n            {putAfterItemId})\r\n        return response.data\r\n    },\r\n}\r\n\r\nexport const taskAPI = {\r\n    async getTasks(todolistID: string) {\r\n        return await instance.get<{ items: TaskType[], error: string, totalCount: number }>(\r\n            `/todo-lists/${todolistID}/tasks`)\r\n    },\r\n    async addTask(todolistID: string, title: string) {\r\n        const response = await instance.post<CommonResponseType<{ item: TaskType }>>(\r\n            `/todo-lists/${todolistID}/tasks`,\r\n            {title})\r\n        return response.data\r\n    },\r\n    async removeTask(todolistID: string, taskID: string) {\r\n        return await instance.delete<CommonResponseType<{}>>(`/todo-lists/${todolistID}/tasks/${taskID}`)\r\n    },\r\n    async renameTask(todolistID: string, taskID: string, title: string) {\r\n        return await instance.put<CommonResponseType<{ items: TaskType }>>(\r\n            `/todo-lists/${todolistID}/tasks/${taskID}`,\r\n            {title})\r\n    },\r\n    async updateTask(todolistID: string, taskID: string, model: Partial<UpdateTaskModelType>) {\r\n        return await instance.put<CommonResponseType<{ items: TaskType }>>(\r\n            `/todo-lists/${todolistID}/tasks/${taskID}`,\r\n            model)\r\n    },\r\n    async reorderTask(todolistID: string, taskID: string, putAfterItemId: string) {\r\n        const response = await instance.put<CommonResponseType<{}>>(\r\n            `/todo-lists/${todolistID}/tasks/${taskID}/reorder`,\r\n            {putAfterItemId})\r\n        return response.data\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    async me() {\r\n        const response = await instance.get<CommonResponseType<AuthMeResponseType>>(`/auth/me`)\r\n        return response.data\r\n    },\r\n    async login(data: LoginParamsType) {\r\n        const response = await instance.post<CommonResponseType<{ userId: number }>>(`/auth/login`, data)\r\n        return response.data\r\n    },\r\n    async logout() {\r\n        const response = await instance.delete<CommonResponseType<{}>>(`/auth/login`)\r\n        return response.data\r\n    },\r\n}","import { resultCodes } from \"../../../definitions/result-codes\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../../utils\";\r\nimport { getTasks } from \"../task-reducer/tasks-reducer\";\r\nimport { RequestStatusType, todolistAPI, TodolistType } from \"../../../api\";\r\nimport { setInitializedApp, setOperationStatus } from \"../ui-reducer/ui-reducer\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n    AddTodoListType,\r\n    ChangeFilterTodoListType,\r\n    ChangeTodolistEntityStatusType,\r\n    RemoveTodoListType,\r\n    RenameTodoListType, ReorderTodolistType,\r\n    SetTodolistsType\r\n} from \"./todolist-actions-types\";\r\nimport { DispatchType } from \"../../store/store\";\r\nimport { ThunkActionDispatch } from \"redux-thunk\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: [] as TodolistDomainType[],\r\n    reducers: {\r\n        setTodolists(state, action: SetTodolistsType) {\r\n            return action.payload.todolists.map<TodolistDomainType>(tl => ({ ...tl, entityStatus: 'idle', filter: 'all' }))\r\n        },\r\n        removeTodoList(state, action: RemoveTodoListType) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state.splice(index, 1)\r\n        },\r\n        addTodoList(state, action: AddTodoListType) {\r\n            state.unshift({\r\n                ...action.payload,\r\n                filter: \"all\",\r\n                entityStatus: \"idle\"\r\n            })\r\n        },\r\n        renameTodoList(state, action: RenameTodoListType) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeFilterTodoList(state, action: ChangeFilterTodoListType) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: ChangeTodolistEntityStatusType) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n        // reorderTodolists(state,action:ReorderTodolistType){\r\n        //     return  state.sort((a,b) => a.order>b.order?1:-1)\r\n        // }\r\n    },\r\n})\r\n\r\nexport const {\r\n    changeFilterTodoList,\r\n    removeTodoList,\r\n    renameTodoList,\r\n    addTodoList,\r\n    changeTodolistEntityStatus,\r\n    setTodolists,\r\n} = slice.actions\r\nexport const todoListsReducer = slice.reducer\r\n\r\n\r\n//Thunk\r\nexport const getTodolists = () => async (dispatch: ThunkActionDispatch<DispatchType>) => {\r\n\r\n    try {\r\n        const response = await todolistAPI.getTodolists()\r\n        console.log(response)\r\n        dispatch(setTodolists({ todolists: response }))\r\n        //dispatch(setInitializedApp({initializeStatus: true}))\r\n        response.forEach((ts) => {\r\n            dispatch(getTasks(ts.id))\r\n        })\r\n    } catch (e: any) {\r\n        dispatch(setInitializedApp({ initializeStatus: true }))\r\n        handleServerNetworkError(dispatch, e.message)\r\n    }\r\n\r\n}\r\nexport const CreateTodolist = (title: string) => async (dispatch: ThunkActionDispatch<DispatchType>) => {\r\n    try {\r\n        dispatch(setOperationStatus({ operationStatus: \"loading\" }))\r\n        const response = await todolistAPI.createTodolist(title)\r\n        if (response.resultCode === resultCodes.success) {\r\n            //dispatch(getTodolists())}\r\n            dispatch(addTodoList({ ...response.data.item }))\r\n            dispatch(setOperationStatus({ operationStatus: \"succeeded\" }))\r\n        } else {\r\n            handleServerAppError<{ item: TodolistType }>(dispatch, response)\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(dispatch, e.message)\r\n    }\r\n\r\n}\r\nexport const removeTodolist = (id: string) => async (dispatch: ThunkActionDispatch<DispatchType>) => {\r\n    dispatch(changeTodolistEntityStatus({ id, entityStatus: \"loading\" }))\r\n    dispatch(setOperationStatus({ operationStatus: \"loading\" }))\r\n    const response = await todolistAPI.removeTodolist(id)\r\n    if (response.resultCode === resultCodes.success) {\r\n        //dispatch(getTodolists())\r\n        dispatch(removeTodoList({ id }))\r\n        dispatch(setOperationStatus({ operationStatus: \"succeeded\" }))\r\n    }\r\n}\r\nexport const renameTodolist = (id: string, title: string) => async (dispatch: ThunkActionDispatch<DispatchType>) => {\r\n    dispatch(setOperationStatus({ operationStatus: \"loading\" }))\r\n    const response = await todolistAPI.renameTodolist(id, title)\r\n    if (response.resultCode === resultCodes.success) {\r\n        //dispatch(getTodolists())\r\n        dispatch(renameTodoList({ id, title }))\r\n        dispatch(setOperationStatus({ operationStatus: \"succeeded\" }))\r\n    }\r\n}\r\n\r\nexport const reorderTodolists = (currentID: string, id: string) => async (dispatch: ThunkActionDispatch<DispatchType>) => {\r\n    try {\r\n        dispatch(setOperationStatus({ operationStatus: \"loading\" }))\r\n        const response = await todolistAPI.reorderTodoList(currentID, id)\r\n        if (response.resultCode === resultCodes.success) {\r\n            await dispatch(getTodolists())\r\n            dispatch(setOperationStatus({ operationStatus: \"succeeded\" }))\r\n        } else {\r\n            handleServerAppError<{}>(dispatch, response)\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(dispatch, e.message)\r\n    }\r\n}\r\n\r\n//\r\n// export function _todoListsReducer(todoLists: TodolistDomainType[] = [], action: TodolistReducerActionsTypes): TodolistDomainType[] {\r\n//     switch (action.type) {\r\n//         case 'SET-TODOLISTS':\r\n//             return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n//         case \"REMOVE-TODOLIST\":\r\n//             return [...todoLists.filter(t => t.id !== action.id)]\r\n//         case \"ADD-TODOLIST\":\r\n//             return [{\r\n//                 ...action.payload,\r\n//                 addedDate: \"\",\r\n//                 order: 0,\r\n//                 filter: \"all\",\r\n//                 entityStatus: \"idle\"\r\n//             },\r\n//                 ...todoLists,]\r\n//         case \"CHANGE-TODOLIST-TITLE\":\r\n//             return [...todoLists.map(t => t.id === action.payload.id ? {\r\n//                 ...t,\r\n//                 title: action.payload.title\r\n//             } : t)]\r\n//         case \"CHANGE-TODOLIST-FILTER\":\r\n//             return [...todoLists.map(t => t.id === action.payload.id ? {\r\n//                 ...t,\r\n//                 filter: action.payload.filter\r\n//             } : t)]\r\n//         case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n//             return [...todoLists.map(t => t.id === action.payload.id ? {\r\n//                 ...t,\r\n//                 entityStatus: action.payload.entityStatus\r\n//             } : t)]\r\n//\r\n//         default:\r\n//             return todoLists\r\n//     }\r\n// }","import {resultCodes} from \"../../../definitions/result-codes\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils\";\r\nimport {taskAPI, TaskStatuses, TaskType} from \"../../../api\";\r\nimport {setOperationStatus} from \"../ui-reducer/ui-reducer\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {\r\n    AddTaskType,\r\n    ChangeTaskEntityStatusType,\r\n    ParamUpdateTask,\r\n    RemoveTaskType,\r\n    TaskStateType,\r\n    UpdateTaskType\r\n} from \"./task-types\";\r\nimport {addTodoList, removeTodoList, setTodolists} from \"../todolist-reducer/todolists-reducer\";\r\nimport {DispatchType, GlobalStateType} from \"../../store/store\";\r\nimport {ThunkActionDispatch} from \"redux-thunk\";\r\n\r\n\r\nexport const getTasks = createAsyncThunk('tasks/getTasks', async (\r\n    todolistID: string, thunk) => {\r\n    const {dispatch} = thunk\r\n    try {\r\n        dispatch(setOperationStatus({operationStatus: \"loading\"}))\r\n        const response = await taskAPI.getTasks(todolistID)\r\n        return {todolistID, tasks: response.data.items}\r\n    } catch (error) {\r\n        return {todolistID, tasks: []}\r\n    } finally {\r\n        dispatch(setOperationStatus({operationStatus: \"succeeded\"}))\r\n    }\r\n})\r\n\r\nexport const updateTask = createAsyncThunk<ParamUpdateTask, ParamUpdateTask,\r\n    {\r\n        dispatch: ThunkActionDispatch<DispatchType>\r\n        state: GlobalStateType\r\n    }>\r\n('tasks/updateTask', async (\r\n    param, thunk) => {\r\n    const {taskID, todolistID, changes} = param\r\n    const {dispatch, getState} = thunk\r\n    try {\r\n        dispatch(setOperationStatus({operationStatus: \"loading\"}))\r\n        const currentTask = getState().tasks[todolistID].find((t: TaskType) => t.id === taskID) as TaskType\r\n        await taskAPI.updateTask(todolistID, taskID, {...currentTask, ...changes})\r\n        dispatch(setOperationStatus({operationStatus: \"succeeded\"}))\r\n        return {\r\n            todolistID: todolistID,\r\n            taskID: taskID,\r\n            changes: {...currentTask, ...changes}\r\n        }\r\n\r\n    } catch (error) {\r\n        return {\r\n            todolistID: todolistID,\r\n            taskID: taskID,\r\n            changes: {...changes}\r\n        }\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TaskStateType,\r\n    reducers: {\r\n        deleteTask(state, action: RemoveTaskType) {\r\n            const tasks = state[action.payload.todolistID]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskID)\r\n            tasks.splice(index, 1)\r\n        },\r\n        addNewTask(state, action: AddTaskType) {\r\n            const newTask: TaskType = {\r\n                ...action.payload.task,\r\n                title: action.payload.title,\r\n                status: TaskStatuses.New\r\n            }\r\n            state[action.payload.todolistID].unshift(newTask)\r\n        },\r\n        modifyTask(state, action: UpdateTaskType) {\r\n            const tasks = state[action.payload.todolistID]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskID)\r\n            tasks[index] = {...action.payload.changes}\r\n        },\r\n        changeTaskEntityStatus(state, action: ChangeTaskEntityStatusType) {\r\n            const tasks = state[action.payload.todolistID]\r\n            const index = tasks.findIndex(t => t.id = action.payload.taskID)\r\n            tasks[index].entityTaskStatus = action.payload.entityStatus\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(setTodolists, (state, action) => {\r\n            action.payload.todolists.forEach(tl => state[tl.id] = [])\r\n        })\r\n        builder.addCase(addTodoList, (state, action) => {\r\n            state[action.payload.id] = []\r\n        })\r\n        builder.addCase(removeTodoList, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(getTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistID] = action.payload.tasks\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistID]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskID)\r\n            tasks[index] = {...action.payload.changes} as TaskType\r\n        })\r\n\r\n    }\r\n})\r\nexport const {changeTaskEntityStatus, deleteTask, addNewTask, modifyTask} = slice.actions\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n//Thunk\r\n\r\nexport const addTask = (todolistID: string, title: string) => async (dispatch: any) => {\r\n    try {\r\n        dispatch(setOperationStatus({operationStatus: \"loading\"}))\r\n        const response = await taskAPI.addTask(todolistID, title)\r\n        if (response.resultCode === resultCodes.success) {\r\n            //dispatch(getTasks(todolistID))\r\n            dispatch(addNewTask({todolistID, task: response.data.item, title}))\r\n            dispatch(setOperationStatus({operationStatus: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError<{ item: TaskType }>(dispatch, response)\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(dispatch, e.message)\r\n    }\r\n\r\n}\r\nexport const removeTask = (todolistID: string, taskID: string) => async (dispatch: any) => {\r\n    dispatch(setOperationStatus({operationStatus: \"loading\"}))\r\n    dispatch(changeTaskEntityStatus({todolistID, taskID, entityStatus: \"loading\"}))\r\n    const response = await taskAPI.removeTask(todolistID, taskID)\r\n    if (response.data.resultCode === resultCodes.success) {\r\n        //dispatch(getTasks(todolistID))\r\n        dispatch(deleteTask({todolistID, taskID}))\r\n        dispatch(setOperationStatus({operationStatus: \"succeeded\"}))\r\n    }\r\n}\r\n\r\n// export function _tasksReducer(tasks: TaskStateType = {}, action: any): TaskStateType {\r\n//     switch (action.type) {\r\n//         case 'SET-TODOLISTS': {\r\n//             const tasksCopy = {...tasks}\r\n//             action.todolists.forEach((tl: TodolistType) => {\r\n//                 tasksCopy[tl.id] = []\r\n//             })\r\n//             return tasksCopy;\r\n//         }\r\n//         case \"SET-TASKS\":\r\n//             return {\r\n//                 ...tasks,\r\n//                 [action.todolistID]: [...action.tasks]\r\n//             }\r\n//         case \"REMOVE-TASK\":\r\n//             return {\r\n//                 ...tasks,\r\n//                 [action.todolistID]: tasks[action.todolistID].filter(task => task.id !== action.taskID)\r\n//             }\r\n//         case \"ADD-TASK\":\r\n//             let newTask: TaskType = {...action.task, title: action.title, status: TaskStatuses.New}\r\n//             return {\r\n//                 ...tasks,\r\n//                 [action.todolistID]: [newTask, ...tasks[action.todolistID]]\r\n//             }\r\n//         case \"UPDATE-TASK\":\r\n//             return {\r\n//                 ...tasks,\r\n//                 [action.updateTask.todoListId!]: tasks[action.updateTask.todoListId!].map(\r\n//                     task => task.id === action.updateTask.id ? action.updateTask : task\r\n//                 )\r\n//             }\r\n//\r\n//         case \"ADD-TODOLIST\"://заюзан ActionCreator из редьюсера тудулиста, для добавления пустого массива тасок\r\n//             return {\r\n//                 ...tasks,\r\n//                 [action.payload.id]: []\r\n//             }\r\n//         case \"REMOVE-TODOLIST\"://заюзан ActionCreator из редьюсера тудулиста, для удаления массива тасок\r\n//             let copyTasks = {...tasks}\r\n//             delete copyTasks[action.id]\r\n//             return copyTasks\r\n//         case \"CHANGE-TASK-ENTITY-STATUS\":\r\n//             return {\r\n//                 ...tasks,\r\n//                 [action.payload.todolistID]: tasks[action.payload.todolistID].map(\r\n//                     task => task.id === action.payload.taskID ? {\r\n//                         ...task,\r\n//                         entityTaskStatus: action.payload.entityStatus\r\n//                     } : task\r\n//                 )\r\n//             }\r\n//         default:\r\n//             return tasks\r\n//     }\r\n// }\r\n\r\n// export const _updateTask = (todolistID: string, taskID: string, change: Partial<TaskType>) =>\r\n//     async (dispatch: any, getState: any) => {\r\n//         dispatch(setOperationStatus({operationStatus: \"loading\"}))\r\n//         const currentTask = getState().tasks[todolistID].find((t: TaskType) => t.id === taskID) as TaskType\r\n//         try {\r\n//             const response = await taskAPI.updateTask(todolistID, taskID, {...currentTask, ...change})\r\n//             if (response.data.resultCode === resultCodes.success) {\r\n//                 dispatch(modifyTask({todolistID, taskID, changes: {...currentTask, ...change}}))\r\n//                 dispatch(setOperationStatus({operationStatus: \"succeeded\"}))\r\n//             } else {\r\n//                 handleServerAppError<{ items: TaskType }>(dispatch, response.data)\r\n//             }\r\n//         } catch (e: any) {\r\n//             handleServerNetworkError(dispatch, e.message)\r\n//         }\r\n//     }","type InitialStateType = {\r\n    isDarkTheme: boolean\r\n}\r\ntype ToggleTheme = {\r\n    type:'TOGGLE-THEME'\r\n    isDarkTheme:boolean\r\n}\r\nexport  type ThemeActionsTypes = ToggleTheme\r\n\r\nexport function themeReducer(state:InitialStateType = {isDarkTheme:true}, action: ThemeActionsTypes)  {\r\n    switch (action.type) {\r\n        case 'TOGGLE-THEME': {\r\n            return {\r\n                ...state,\r\n                isDarkTheme:action.isDarkTheme\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const toggleTheme = (isDarkTheme:boolean):ToggleTheme => {\r\n    return {type:\"TOGGLE-THEME\",isDarkTheme}\r\n}\r\n","import {resultCodes} from \"../../../definitions/result-codes\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils\";\r\nimport {createSlice} from \"@reduxjs/toolkit\";\r\nimport {authAPI, LoginParamsType} from \"../../../api\";\r\nimport {AuthReducerActionsTypes} from \"./auth-actions-types\";\r\nimport {setInitializedApp, setOperationStatus, setProgress} from \"../ui-reducer/ui-reducer\";\r\n\r\n\r\nconst slice = createSlice({\r\n    name:'auth',\r\n    initialState: {isLoggedIn: false},\r\n    reducers:{\r\n        setIsLoggedIn (state, action:AuthReducerActionsTypes) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nconst {setIsLoggedIn} = slice.actions\r\n\r\n// thunks\r\n\r\nexport const initializeApp = ()  => async (dispatch:any) => {\r\n\r\n    let timer: any\r\n    try {\r\n        let progress = 0\r\n         timer = setInterval(() => {\r\n            if (progress < 100) {\r\n                progress += 10\r\n                dispatch(setProgress({progress}))\r\n            } else {\r\n                clearInterval(timer)\r\n                dispatch(setInitializedApp({initializeStatus:true}))\r\n            }\r\n        }, 100)\r\n        const response = await authAPI.me()\r\n        if (response.resultCode === resultCodes.success) {\r\n            dispatch(setIsLoggedIn({value:true}))\r\n\r\n        } else {\r\n            dispatch(setIsLoggedIn({value:false}))\r\n        }\r\n    } catch (e: any) {\r\n\r\n    }\r\n}\r\n\r\nexport const login = (data: LoginParamsType) => async (dispatch:any) => {\r\n    try {\r\n        dispatch(setOperationStatus({operationStatus :'loading'}))\r\n        const response = await authAPI.login(data)\r\n        if (response.resultCode === resultCodes.success) {\r\n            dispatch(setIsLoggedIn({value:true}))\r\n            dispatch(setOperationStatus({operationStatus:'succeeded'}))\r\n        } else {\r\n            handleServerAppError<{ userId: number }>(dispatch, response)\r\n            dispatch(setOperationStatus({operationStatus:'failed'}))\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(dispatch, e.message)\r\n        dispatch(setOperationStatus({operationStatus:'failed'}))\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch:any) => {\r\n    try {\r\n        dispatch(setOperationStatus({operationStatus:'loading'}))\r\n        const response = await authAPI.logout()\r\n        if (response.resultCode === resultCodes.success) {\r\n\r\n            dispatch(setIsLoggedIn({value:false}))\r\n            dispatch(setOperationStatus({operationStatus:'succeeded'}))\r\n        } else {\r\n            handleServerAppError<{}>(dispatch, response)\r\n            dispatch(setOperationStatus({operationStatus:'failed'}))\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(dispatch, e.message)\r\n        dispatch(setOperationStatus({operationStatus:'failed'}))\r\n    }\r\n}\r\n\r\n//type InitialStateType = typeof initialState\r\n// export const authReducer = (state: InitialStateType = initialState, action: AuthReducerActionsTypes): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'login/SET-IS-LOGGED-IN':\r\n//             return {...state, isLoggedIn: action.value}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../reducers/task-reducer/tasks-reducer\";\r\nimport {todoListsReducer} from \"../reducers/todolist-reducer/todolists-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {themeReducer} from \"../reducers/theme-reducer/theme-reducer\";\r\nimport {uiReducer} from \"../reducers/ui-reducer/ui-reducer\";\r\nimport {authReducer} from \"../reducers/auth-reducer/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nexport type GlobalStateType = ReturnType<typeof rootReducer>\r\nexport type DispatchType = typeof store.dispatch\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    ui:uiReducer,\r\n    theme: themeReducer,\r\n    auth: authReducer,\r\n})\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware:getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GlobalStateType, DispatchType} from \"../../../redux/store/store\";\r\nimport {setUiError} from \"../../../redux/reducers/ui-reducer/ui-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector((state: GlobalStateType) => state.ui.error)\r\n    const dispatch = useDispatch<DispatchType>()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setUiError({error:''}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GlobalStateType, DispatchType} from \"../../redux/store/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {login} from \"../../redux/reducers/auth-reducer/auth-reducer\";\r\nimport {ErrorSnackbar} from \"../common/ErrorSnackbar/ErrorSnackbar\";\r\nimport {LoginParamsType} from \"../../api\";\r\n\r\n\r\nexport const Login = React.memo(() => {\r\n    const dispatch = useDispatch<DispatchType>()\r\n\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'The password cannot be shorter than 3 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(login(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <Grid container\r\n              display={\"flex\"}\r\n              alignItems={\"center\"}\r\n              justifyContent={'center'}\r\n              style={{minHeight: \"100vh\", backgroundColor: isDarkTheme ? \"#484e50\" : \"rgba(96,151,225,0.37)\"}}\r\n        >\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                                <div>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                                <div>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}/>}\r\n                            />\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}\r\n                                disabled={!formik.isValid || !formik.dirty}\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                    <ErrorSnackbar/>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport s from \"./PageNotFound.module.css\"\r\n\r\n\r\nexport const PageNotFound = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <header className={s.topHeader}>\r\n            </header>\r\n            <div>\r\n                <div className={s.starsec}></div>\r\n                <div className={s.starthird}></div>\r\n                <div className={s.starfourth}></div>\r\n                <div className={s.starfifth}></div>\r\n            </div>\r\n\r\n\r\n            <div className={s.lamp__wrap}>\r\n                <div className={s.lamp}>\r\n                    <div className={s.cable}></div>\r\n                    <div className={s.cover}></div>\r\n                    <div className={s.inCover}>\r\n                        <div className={s.bulb}></div>\r\n                    </div>\r\n                    <div className={s.light}></div>\r\n                </div>\r\n            </div>\r\n\r\n            <section className={s.error}>\r\n\r\n                <div className={s.error__content}>\r\n                    <div className={s.error__message}>\r\n                        <h1 className={s.message__title}>Page Not Found</h1>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </section>\r\n\r\n        </div>\r\n    )\r\n}","import { createTheme } from \"@mui/material\";\r\n\r\nexport const lightTheme = createTheme({\r\n    palette: {\r\n        mode: \"light\",\r\n        primary: {\r\n            main: \"#1a72e7\",\r\n        },\r\n        secondary: {\r\n            main: \"#0b2877\",\r\n        },\r\n    },\r\n    typography: {\r\n        button: {\r\n            textTransform: \"none\"\r\n        }\r\n    },\r\n    components: {\r\n        MuiContainer: {\r\n            defaultProps: {\r\n                maxWidth: false,\r\n\r\n            },\r\n        },\r\n        MuiPaper: {\r\n            styleOverrides: {\r\n                elevation8: {\r\n                    position: \"relative\",\r\n                    minHeight: \"500px\",\r\n                    padding: \"18px\",\r\n                    width: \"300px\",\r\n                    '&:hover': {\r\n                        cursor: \"grab\",\r\n                    }\r\n                },\r\n                elevation1: {\r\n                    margin: \"0 0 5px 0\",\r\n                    backgroundColor: \"#c2d7f3\"\r\n                }\r\n            },\r\n\r\n        },\r\n        MuiList: {\r\n            defaultProps: {\r\n                sx: {\r\n                    cursor: \"default\"\r\n                }\r\n            }\r\n        },\r\n        MuiButton: {\r\n            defaultProps: {\r\n                sx: {\r\n                    color: \"white\",\r\n                    '&:hover': {\r\n                        backgroundColor: \"rgb(11,40,119)\",\r\n                    }\r\n                },\r\n\r\n            },\r\n        },\r\n        MuiTypography: {\r\n            styleOverrides: {\r\n                h6: {\r\n                    cursor: \"default\"\r\n                }\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const darkTheme = createTheme({\r\n    palette: {\r\n        mode: \"dark\",\r\n        primary: {\r\n            main: \"#594948\",\r\n        },\r\n        secondary: {\r\n            main: \"#333335\",\r\n        },\r\n    },\r\n    typography: {\r\n        button: {\r\n            textTransform: \"none\"\r\n        }\r\n    },\r\n    components: {\r\n\r\n        MuiContainer: {\r\n            defaultProps: {\r\n                maxWidth: false,\r\n            },\r\n        },\r\n        MuiPaper: {\r\n            styleOverrides: {\r\n                elevation8: {\r\n                    position: \"relative\",\r\n                    minHeight: \"500px\",\r\n                    padding: \"18px\",\r\n                    width: \"300px\",\r\n                    '&:hover': {\r\n                        cursor: \"grab\",\r\n                    }\r\n                },\r\n                elevation1: {\r\n                    margin: \"0 0 5px 0\",\r\n                }\r\n            }\r\n        },\r\n        MuiList: {\r\n            defaultProps: {\r\n                sx: {\r\n                    cursor: \"default\"\r\n                }\r\n            }\r\n        },\r\n        MuiListItem: {\r\n            defaultProps: {\r\n                sx: {\r\n                    justifyContent: \"space-between\",\r\n                }\r\n            }\r\n        },\r\n        MuiButton: {\r\n            defaultProps: {\r\n                sx: {\r\n                    color: \"white\",\r\n                    '&:hover': {\r\n                        backgroundColor: \"rgb(62, 51, 50)\",\r\n                    }\r\n                },\r\n\r\n            },\r\n        },\r\n        MuiTypography: {\r\n            styleOverrides: {\r\n                h6: {\r\n                    cursor: \"default\"\r\n                }\r\n            }\r\n        },\r\n    }\r\n});","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBoxOutlined} from \"@mui/icons-material\";\r\nimport {RequestStatusType} from \"../../../api\";\r\n\r\n\r\ntype AddItemInputType = {\r\n    id?:string\r\n    addItem: (title: string,id?:string) => void\r\n    entityStatus?: RequestStatusType\r\n    placeHolder:string\r\n}\r\n\r\nexport const AddItemInput = React.memo(function ({id,addItem, entityStatus,placeHolder}: AddItemInputType) {\r\n    console.log(\"form\")\r\n    const [newTaskTittle, setNewTaskTittle] = useState(\"\")\r\n    const [error, setError] = useState<string>(\"\")\r\n\r\n    const addItemHandler = useCallback(() => {\r\n        const trimmedTitle = newTaskTittle.trim()\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle,id)\r\n        } else {\r\n            setError(\"Обязательное поле\")\r\n        }\r\n        setNewTaskTittle(\"\")\r\n    }, [addItem, newTaskTittle,id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTittle(e.currentTarget.value);\r\n        setError(\"\")\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler()\r\n        }\r\n    }, [addItemHandler])\r\n\r\n    return (\r\n        <div style={{display: \"flex\",justifyContent: \"space-between\",alignItems:\"center\"}}>\r\n            <TextField\r\n                disabled={entityStatus === \"loading\"}\r\n                variant={\"outlined\"}\r\n                label={placeHolder}\r\n                size={\"small\"}\r\n                error={!!error}\r\n                helperText={error}\r\n                value={newTaskTittle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}/>\r\n\r\n            <IconButton\r\n                disabled={entityStatus === \"loading\"}\r\n                size={\"small\"}\r\n                onClick={addItemHandler}\r\n            >\r\n                <AddBoxOutlined/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport {TextField, Typography} from \"@mui/material\";\r\nimport {Variant} from \"@mui/material/styles/createTypography\";\r\n\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    variant: Variant\r\n    renameItem: (title: string) => void\r\n    className?: string\r\n}\r\n\r\nexport const EditableSpan = React.memo(\r\n    function ({\r\n                  title,\r\n                  variant,\r\n                  className,\r\n                  renameItem,\r\n              }: EditableSpanType) {\r\n        console.log(\"editable_span\")\r\n\r\n\r\n        const [editMode, setEditMode] = useState(false)\r\n        const [input, setInput] = useState(\" \") // записываем пустую, но сетаем тайтл реальный в колбэке\r\n\r\n        const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n            setInput(e.currentTarget.value), [setInput])\r\n\r\n         const onDoubleClickHandler = useCallback(() => {\r\n            setEditMode(!editMode);\r\n            setInput(title)\r\n        }, [editMode, title])\r\n\r\n        const onBlurHandler = useCallback(() => {\r\n            setEditMode(!editMode)\r\n            renameItem(input)\r\n        }, [editMode, input, renameItem])\r\n\r\n        const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(!editMode)\r\n                renameItem(input)\r\n            }\r\n        }, [editMode, input, renameItem])\r\n\r\n        return editMode\r\n            ? <TextField\r\n                size={\"small\"}\r\n                value={input}\r\n                onChange={onChangeHandler}\r\n                onBlur={onBlurHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                autoFocus={true}/>\r\n            : <Typography\r\n                onDoubleClick={onDoubleClickHandler}\r\n                width={\"100%\"}\r\n                align={\"left\"}\r\n                noWrap\r\n                component={\"div\"}\r\n                variant={variant}\r\n                className={className}\r\n            >\r\n                <div style={{\r\n                    width:\"100%\",\r\n                    display:\"flex\",\r\n                    justifyContent:\"space-between\"\r\n                }}>\r\n                    <Typography noWrap>\r\n                        {title}\r\n                    </Typography>\r\n\r\n                </div>\r\n            </Typography>\r\n\r\n\r\n    })","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../common/EditableSpan/EditableSpan\";\r\nimport {Checkbox, IconButton, ListItem} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {RequestStatusType, TaskStatuses, TaskType} from \"../../api\";\r\n\r\n\r\n\r\ntype TaskItemType = {\r\n    todoListID: string\r\n    task: TaskType\r\n    entityTaskStatus: RequestStatusType\r\n    removeTask: (todolistID: string, taskID: string) => void\r\n    renameTask: (taskID: string, todolistID: string, newTitle: string) => void\r\n    changeTaskStatus: (todolistID: string, taskID: string, status: TaskStatuses) => void\r\n}\r\n\r\nexport const TaskItem = React.memo(({\r\n                                        task,\r\n                                        removeTask,\r\n                                        renameTask,\r\n                                        entityTaskStatus,\r\n                                        changeTaskStatus,\r\n                                        todoListID,\r\n                                    }: TaskItemType) => {\r\n\r\n        const renameTaskHandler = useCallback((newTitle: string) => {\r\n            renameTask(task.id, todoListID, newTitle)\r\n        }, [task.id, todoListID, renameTask])\r\n\r\n        const handleChangeCheckboxValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            const isDoneValue = e.currentTarget.checked\r\n            changeTaskStatus(\r\n                todoListID, task.id, isDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n\r\n        }, [task.id, todoListID, changeTaskStatus])\r\n\r\n        const removeTaskHandler = useCallback(() => {\r\n            removeTask(todoListID, task.id)\r\n        }, [task.id, todoListID, removeTask])\r\n\r\n        return (\r\n            <ListItem key={task.id} >\r\n\r\n                    <Checkbox\r\n                        size={\"small\"}\r\n                        checked={!!task.status}\r\n                        onChange={handleChangeCheckboxValue}\r\n                    />\r\n                    <EditableSpan\r\n                        variant={\"body2\"}\r\n                        renameItem={renameTaskHandler}\r\n                        title={task.title}/>\r\n\r\n                <IconButton\r\n                    size={\"small\"}\r\n                    disabled={entityTaskStatus === \"loading\"}\r\n                    onClick={removeTaskHandler}\r\n                ><Delete/></IconButton>\r\n            </ListItem>)\r\n    }\r\n)\r\n","import {useDispatch} from \"react-redux\";\r\nimport {useCallback, useMemo} from \"react\";\r\nimport {DispatchType} from \"../redux/store/store\";\r\nimport {addTask, removeTask, updateTask} from \"../redux/reducers/task-reducer/tasks-reducer\";\r\nimport {TaskStatuses} from \"../api\";\r\n\r\n\r\nexport const useTaskCRUD = () =>{\r\n    const dispatch = useDispatch<DispatchType>()\r\n\r\n    const handleTaskRemove = useCallback((todolistID: string, taskID: string) => {\r\n        dispatch(removeTask(todolistID, taskID))\r\n    }, [dispatch])\r\n\r\n    const handleTaskAdd = useCallback((title: string,todolistID?:string) => {\r\n        dispatch(addTask(todolistID!, title))\r\n    }, [dispatch])\r\n\r\n    const handleTaskRename = useCallback((taskID: string, todolistID: string, title: string) => {\r\n        dispatch(updateTask(\r\n            {todolistID, taskID,changes:{title}}\r\n        ))\r\n    }, [dispatch])\r\n\r\n    const handleTaskStatusChange = useCallback((todolistID: string, taskID: string, status: TaskStatuses) => {\r\n        dispatch(updateTask({todolistID,taskID,changes: {status}}))\r\n    }, [dispatch])\r\n\r\nreturn useMemo(\r\n    ()=>({\r\n        handleTaskRemove,\r\n        handleTaskAdd,\r\n        handleTaskRename,\r\n        handleTaskStatusChange,\r\n    }),\r\n    [\r\n        handleTaskRemove,\r\n        handleTaskAdd,\r\n        handleTaskRename,\r\n        handleTaskStatusChange,\r\n    ])\r\n}\r\n\r\n\r\n","import React, {useCallback, useMemo} from \"react\";\r\nimport {AddItemInput} from \"../common/AddItemInput/AddItemInput\";\r\nimport {EditableSpan} from \"../common/EditableSpan/EditableSpan\";\r\nimport {FilterValuesType} from \"../../redux/reducers/todolist-reducer/todolists-reducer\";\r\nimport {TaskItem} from \"../taskItem/TaskItem\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Box, Button, ButtonGroup, IconButton, List, Paper} from \"@mui/material\";\r\nimport {tasksForRender} from \"../../utils\";\r\nimport {useTaskCRUD} from \"../../hooks/useTaskCRUD\";\r\nimport {useTasksFilter} from \"../../hooks/useTasksFilter\";\r\nimport {RequestStatusType, TaskType} from \"../../api\";\r\n\r\ntype TodolistType = {\r\n    todolistID: string\r\n    entityStatus: RequestStatusType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTodolist: (todoListID: string) => void\r\n    renameTodolist: (todoListID: string, newTitle: string) => void\r\n    filterTdl: FilterValuesType\r\n}\r\n\r\n\r\nconst Todolist = React.memo(function ({\r\n                                          todolistID,\r\n                                          entityStatus,\r\n                                          title,\r\n                                          tasks,\r\n                                          removeTodolist,\r\n                                          renameTodolist,\r\n                                          filterTdl,\r\n                                      }: TodolistType) {\r\n\r\n    const {handleTaskRemove, handleTaskRename, handleTaskStatusChange, handleTaskAdd} = useTaskCRUD()\r\n    const {handleFilterAllClick, handleFilterCompletedClick, handleFilterActiveClick} = useTasksFilter(todolistID)\r\n\r\n    const renameTodoList = useCallback((newTitle: string) => {\r\n        renameTodolist(todolistID, newTitle)\r\n    }, [renameTodolist, todolistID])\r\n\r\n    const tasksJSX = useMemo(() => tasksForRender(tasks, filterTdl).map(task => {\r\n            console.log(`${task.title} + ${task.id} `)\r\n            return (\r\n                <Paper key={task.id}>\r\n                    <TaskItem\r\n                        entityTaskStatus={task.entityTaskStatus!}\r\n                        key={task.id}\r\n                        removeTask={handleTaskRemove}\r\n                        renameTask={handleTaskRename}\r\n                        changeTaskStatus={handleTaskStatusChange}\r\n                        task={task}\r\n                        todoListID={todolistID}\r\n                    />\r\n                </Paper>\r\n            )\r\n        }\r\n    ), [handleTaskStatusChange, filterTdl, handleTaskRemove, handleTaskRename, todolistID, tasks])\r\n\r\n    const buttonStatusClass = useCallback((filter: FilterValuesType) =>\r\n        filter === filterTdl ? \"secondary\" : \"primary\", [filterTdl])\r\n\r\n    return (\r\n        <>\r\n            <Box style={{marginBottom: \"15px\"}}>\r\n                <EditableSpan\r\n                    variant={\"h6\"}\r\n                    title={title}\r\n                    renameItem={renameTodoList}\r\n                />\r\n            </Box>\r\n            <AddItemInput\r\n                id={todolistID}\r\n                placeHolder={\"New task\"}\r\n                addItem={handleTaskAdd}\r\n                entityStatus={entityStatus}\r\n            />\r\n            <List>\r\n                {tasksJSX}\r\n            </List>\r\n            <div style={{bottom: \"15px\", position: \"absolute\"}}>\r\n                <ButtonGroup size={\"small\"} variant={\"contained\"}>\r\n                    <Button onClick={handleFilterAllClick} color={buttonStatusClass(\"all\")}>\r\n                        All\r\n                    </Button>\r\n                    <Button onClick={handleFilterActiveClick} color={buttonStatusClass(\"active\")}>\r\n                        Active\r\n                    </Button>\r\n                    <Button onClick={handleFilterCompletedClick} color={buttonStatusClass(\"completed\")}>\r\n                        Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n                <IconButton\r\n                    style={{marginLeft: \"86px\"}}\r\n                    disabled={entityStatus === \"loading\"}\r\n                    size={\"small\"}\r\n                    onClick={() => {\r\n                        removeTodolist(todolistID)\r\n                    }}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Todolist\r\n\r\n\r\n","import {useCallback, useMemo} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {DispatchType} from \"../redux/store/store\";\r\nimport {changeFilterTodoList} from \"../redux/reducers/todolist-reducer/todolists-reducer\";\r\n\r\n\r\nexport const useTasksFilter = (id:string) =>{\r\n    const dispatch = useDispatch<DispatchType>()\r\n    const handleFilterAllClick = useCallback(() => {\r\n        dispatch(changeFilterTodoList({filter:\"all\", id}))\r\n    }, [dispatch, id])\r\n\r\n    const handleFilterActiveClick = useCallback(() => {\r\n        dispatch(changeFilterTodoList({filter:\"active\", id}))\r\n    }, [dispatch, id])\r\n\r\n    const handleFilterCompletedClick = useCallback(() => {\r\n        dispatch(changeFilterTodoList({filter:\"completed\", id}))\r\n    }, [dispatch, id])\r\n\r\n    return useMemo(\r\n        ()=>({\r\n            handleFilterAllClick,\r\n            handleFilterActiveClick,\r\n            handleFilterCompletedClick,\r\n        }),\r\n        [handleFilterAllClick,\r\n            handleFilterActiveClick,\r\n            handleFilterCompletedClick,\r\n        ])\r\n}","import {FilterValuesType} from \"../redux/reducers/todolist-reducer/todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../api\";\r\n\r\nexport const tasksForRender = (tasks: TaskType[], filterTdl: FilterValuesType) => {\r\n    if (filterTdl === \"active\") {\r\n        return tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filterTdl === \"completed\") {\r\n        return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    return tasks\r\n}","import IconButton from \"@mui/material/IconButton\";\r\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\r\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\r\nimport React from \"react\";\r\n\r\ntype ToggleThemeType = {\r\n    onClickHandler: () => void\r\n    isDarkTheme: boolean\r\n}\r\n\r\nexport const ToggleTheme: React.FC<ToggleThemeType> = ({onClickHandler,isDarkTheme}) => {\r\n\r\n\r\n    return (\r\n        <IconButton\r\n            onClick={onClickHandler}\r\n            color=\"inherit\"\r\n        >\r\n            {isDarkTheme ? (\r\n                <Brightness7Icon/>\r\n            ) : (\r\n                <Brightness4Icon/>\r\n            )}\r\n        </IconButton>\r\n    )\r\n}","import {useDispatch} from \"react-redux\";\r\nimport {DispatchType} from \"../redux/store/store\";\r\nimport {useCallback, useMemo} from \"react\";\r\nimport {CreateTodolist, removeTodolist, renameTodolist} from \"../redux/reducers/todolist-reducer/todolists-reducer\";\r\n\r\nexport const useTodolistCRUD = () => {\r\n    const dispatch = useDispatch<DispatchType>()\r\n\r\n    const handleTodolistAdd = useCallback(function (title: string) {\r\n        dispatch(CreateTodolist(title))\r\n    }, [dispatch])\r\n\r\n    const handleTodolistRemove = useCallback((todolistID: string) => {\r\n        dispatch(removeTodolist(todolistID))\r\n    }, [dispatch])\r\n\r\n    const handleTodolistRename = useCallback((todolistID: string, newTitle: string) => {\r\n        dispatch(renameTodolist(todolistID, newTitle))\r\n    }, [dispatch])\r\n\r\n    return useMemo(\r\n        () => ({\r\n            handleTodolistAdd,\r\n            handleTodolistRemove,\r\n            handleTodolistRename,\r\n        }),\r\n        [\r\n            handleTodolistAdd,\r\n            handleTodolistRemove,\r\n            handleTodolistRename,\r\n        ])\r\n}","import { AddItemInput } from \"../common/AddItemInput/AddItemInput\";\r\nimport { ErrorSnackbar } from \"../common/ErrorSnackbar/ErrorSnackbar\";\r\nimport React, { memo, useCallback, useEffect, useMemo, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { DispatchType, GlobalStateType } from \"../../redux/store/store\";\r\nimport { toggleTheme } from \"../../redux/reducers/theme-reducer/theme-reducer\";\r\nimport Todolist from \"../todolist/Todolist\";\r\nimport { getTodolists, reorderTodolists } from \"../../redux/reducers/todolist-reducer/todolists-reducer\";\r\nimport { ToggleTheme } from \"../common/ToggleTheme/ToggleTheme\";\r\nimport { logout } from \"../../redux/reducers/auth-reducer/auth-reducer\";\r\nimport { AppBar, Box, Container, Grid, IconButton, LinearProgress, Paper, Toolbar, Typography } from \"@mui/material\";\r\nimport { Logout } from \"@mui/icons-material\";\r\nimport { useTodolistCRUD } from \"../../hooks/useTodolistCRUD\";\r\n\r\n\r\nexport const Main = memo(() => {\r\n    const dispatch = useDispatch<DispatchType>()\r\n\r\n    const isLoggedIn = useSelector((state: GlobalStateType) => state.auth.isLoggedIn)\r\n    const operationStatus = useSelector((state: GlobalStateType) => state.ui.operationStatus)\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n    const todoLists = useSelector((state: GlobalStateType) => state.todoLists)\r\n    const tasks = useSelector((state: GlobalStateType) => state.tasks)\r\n\r\n    const { handleTodolistAdd, handleTodolistRename, handleTodolistRemove } = useTodolistCRUD()\r\n\r\n    const toggleThemeHandler = useCallback(() => {\r\n        dispatch(toggleTheme(!isDarkTheme))\r\n    }, [dispatch, isDarkTheme])\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logout())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolists())\r\n    }, [dispatch])\r\n\r\n    let currentID = useRef<string>('')\r\n    const handleDragStart = useCallback((e: React.DragEvent<HTMLDivElement>, id: string) => {\r\n        currentID.current = id\r\n    }, [currentID])\r\n\r\n    const handleDragEnd = useCallback((e: React.DragEvent<HTMLDivElement>) => {\r\n        e.currentTarget.style.opacity = '1'\r\n    }, [])\r\n\r\n    const handleDragOVer = useCallback((e: React.DragEvent<HTMLDivElement>) => {\r\n        e.preventDefault()\r\n        e.currentTarget.style.opacity = '0.1'\r\n    }, [])\r\n\r\n    const handleOnDrop = useCallback((e: React.DragEvent<HTMLDivElement>, id: string) => {\r\n        e.preventDefault()\r\n        e.currentTarget.style.opacity = '1'\r\n        console.log(currentID.current)\r\n        dispatch(reorderTodolists(currentID.current, id))\r\n    }, [dispatch])\r\n\r\n    const todoListRender = useMemo(() => {\r\n        return todoLists.map((tdl) => {\r\n            return (\r\n                <Grid\r\n                    item key={tdl.id}\r\n                    draggable\r\n                    onDragStart={(e) => handleDragStart(e, tdl.id)}\r\n                    onDragLeave={handleDragEnd}\r\n                    onDragEnd={handleDragEnd}\r\n                    onDragOver={handleDragOVer}\r\n                    onDrop={(e) => handleOnDrop(e, tdl.id)}\r\n                >\r\n                    <Paper elevation={8}>\r\n                        <Todolist\r\n                            entityStatus={tdl.entityStatus}\r\n                            key={tdl.id}\r\n                            todolistID={tdl.id}\r\n                            title={tdl.title}\r\n                            tasks={tasks[tdl.id]}\r\n                            removeTodolist={handleTodolistRemove}\r\n                            renameTodolist={handleTodolistRename}\r\n                            filterTdl={tdl.filter}\r\n                        />\r\n                    </Paper>\r\n                </Grid>)\r\n        }\r\n        )\r\n    }, [todoLists, tasks, handleTodolistRename, handleTodolistRemove, handleDragStart, handleOnDrop, handleDragEnd, handleDragOVer])\r\n    return (\r\n        <div style={{ minHeight: \"100vh\", backgroundColor: isDarkTheme ? \"#484e50\" : \"rgba(96,151,225,0.37)\" }}>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar sx={{ justifyContent: 'space-between' }}>\r\n                    <Box>\r\n                        {/*<IconButton>*/}\r\n                        {/*    <Menu />*/}\r\n                        {/*</IconButton>*/}\r\n                        <ToggleTheme onClickHandler={toggleThemeHandler} isDarkTheme={isDarkTheme} />\r\n                    </Box>\r\n                    <Typography>\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn && <IconButton onClick={logoutHandler}><Logout /></IconButton>}\r\n                </Toolbar>\r\n                <div style={{ height: \"5px\" }}>\r\n                    {operationStatus === 'loading' && <LinearProgress />}\r\n                </div>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container style={{ padding: \"20px 0 20px 0\" }}>\r\n                    <AddItemInput placeHolder={\"New todo\"} addItem={handleTodolistAdd} />\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    {todoListRender}\r\n                </Grid>\r\n            </Container>\r\n            <ErrorSnackbar />\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport CircularProgress, {CircularProgressProps} from '@mui/material/CircularProgress';\r\nimport {useSelector} from \"react-redux\";\r\nimport {GlobalStateType} from \"../../../redux/store/store\";\r\n\r\nexport function CircularProgressWithLabel(props: CircularProgressProps & { value: number }) {\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n    return (\r\n        <Box style={{minHeight: \"100vh\", backgroundColor: isDarkTheme ? \"#484e50\" : \"rgba(96,151,225,0.37)\"}}\r\n            sx={{\r\n            top: 0,\r\n            left: 0,\r\n            bottom: 0,\r\n            right: 0,\r\n            position: 'absolute',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        }}>\r\n            <CircularProgress variant=\"determinate\" {...props} />\r\n            <Box sx={{\r\n                top: 0,\r\n                left: 0,\r\n                bottom: 0,\r\n                right: 0,\r\n                position: 'absolute',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n            }}>\r\n                <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\r\n                    {`${Math.round(props.value)}%`}\r\n                </Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}","import React, {useCallback, useEffect, useLayoutEffect} from 'react';\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GlobalStateType, DispatchType} from \"./redux/store/store\";\r\nimport ThemeProvider from \"@mui/material/styles/ThemeProvider\";\r\nimport {darkTheme, lightTheme} from \"./themes/themes\";\r\nimport {Main} from \"./Components/main/Main\";\r\nimport {Login} from \"./Components/login/Login\";\r\nimport {toggleTheme} from \"./redux/reducers/theme-reducer/theme-reducer\";\r\nimport {initializeApp} from \"./redux/reducers/auth-reducer/auth-reducer\";\r\nimport {CircularProgressWithLabel} from \"./Components/common/CircularProgress/CircularProgress\";\r\n\r\n\r\nconst App = React.memo(function () {\r\n\r\n    const dispatch = useDispatch< DispatchType>()\r\n\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n    const isLoggedIn = useSelector((state: GlobalStateType) => state.auth.isLoggedIn)\r\n    const initializeStatus = useSelector((state: GlobalStateType) => state.ui.initializeStatus)\r\n    const progress = useSelector((state: GlobalStateType) => state.ui.progress)\r\n\r\n    const setLocalStorageThemeHandler = useCallback((isDarkTheme: boolean) => {\r\n        localStorage.setItem(\"isDarkTheme\", JSON.stringify(isDarkTheme))\r\n    }, [])\r\n\r\n    const getLocalStorageThemeHandler = useCallback(() => {\r\n        let localTheme = localStorage.getItem(\"isDarkTheme\")\r\n        localTheme === null\r\n            ? dispatch(toggleTheme(true))\r\n            : dispatch(toggleTheme(localTheme && JSON.parse(localTheme)))\r\n    }, [dispatch])\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        getLocalStorageThemeHandler()\r\n    }, [getLocalStorageThemeHandler])\r\n\r\n    useEffect(() => {\r\n        setLocalStorageThemeHandler(isDarkTheme)\r\n    }, [setLocalStorageThemeHandler, isDarkTheme])\r\n\r\n    useLayoutEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [dispatch])\r\n\r\n    if (!initializeStatus) {\r\n        return (\r\n            <ThemeProvider theme={isDarkTheme ? darkTheme : lightTheme}>\r\n                <CircularProgressWithLabel value={progress}/> )\r\n            </ThemeProvider>)\r\n    } else {\r\n        return (\r\n            <ThemeProvider theme={isDarkTheme ? darkTheme : lightTheme}>\r\n                    {isLoggedIn\r\n                        ? <Main/>\r\n                        : <Login/>}\r\n            </ThemeProvider>\r\n        )\r\n    }\r\n})\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store/store\";\r\nimport {HashRouter, Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from \"./Components/login/Login\";\r\nimport {PageNotFound} from \"./Components/utils/PageNotFound/PageNotFound\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <Routes>\r\n                <Route path={\"/todolist\"} element={<App/>}/>\r\n                <Route path={\"/\"} element={<App/>}/>\r\n                <Route path={\"/login\"} element={<Login/>}/>\r\n                <Route path={\"/404\"} element={<PageNotFound/>} />\r\n                <Route path={\"/*\"} element={<Navigate to={\"/404\"}/>}/>\r\n            </Routes>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PageNotFound_container__22tru\",\"top-header\":\"PageNotFound_top-header__VOBLk\",\"starsec\":\"PageNotFound_starsec__1Qc2O\",\"animStar\":\"PageNotFound_animStar__2xinE\",\"starthird\":\"PageNotFound_starthird__3RPGj\",\"starfourth\":\"PageNotFound_starfourth__3Xbpp\",\"starfifth\":\"PageNotFound_starfifth__1NHhQ\",\"clearfix\":\"PageNotFound_clearfix__3Nq5S\",\"error\":\"PageNotFound_error__2CbIC\",\"error__overlay\":\"PageNotFound_error__overlay__ojbm9\",\"error__content\":\"PageNotFound_error__content__ai7Oa\",\"error__message\":\"PageNotFound_error__message__XqZPl\",\"message__title\":\"PageNotFound_message__title__zzBh9\",\"message__text\":\"PageNotFound_message__text__3BZO-\",\"error__nav\":\"PageNotFound_error__nav__1uVX_\",\"e-nav__form\":\"PageNotFound_e-nav__form__hQD8A\",\"e-nav__icon\":\"PageNotFound_e-nav__icon__2RZIa\",\"e-nav__link\":\"PageNotFound_e-nav__link__-6o6j\",\"error__social\":\"PageNotFound_error__social__1MWdO\",\"e-social__list\":\"PageNotFound_e-social__list__1XLFe\",\"e-social__icon\":\"PageNotFound_e-social__icon__1yEuw\",\"e-social__link\":\"PageNotFound_e-social__link__33Izi\",\"lamp\":\"PageNotFound_lamp__2c7sL\",\"move\":\"PageNotFound_move__1o_NF\",\"cable\":\"PageNotFound_cable__12BKO\",\"cover\":\"PageNotFound_cover__Elu8r\",\"in-cover\":\"PageNotFound_in-cover__1dqzv\",\"bulb\":\"PageNotFound_bulb__3IIyz\",\"light\":\"PageNotFound_light__1MnYY\",\"lamp__wrap\":\"PageNotFound_lamp__wrap__IevDU\"};"],"sourceRoot":""}