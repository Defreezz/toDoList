{"version":3,"sources":["serviceWorker.ts","api/api.ts","utils/resultCodes/result-codes.ts","redux/reducers/task-reducer/task-actions.ts","redux/reducers/ui-reducer/ui-actions.ts","utils/error-util/error-utils.ts","redux/reducers/task-reducer/tasks-reducer.ts","redux/reducers/todolist-reducer/todolist-actions.ts","redux/reducers/todolist-reducer/todolists-reducer.ts","redux/reducers/theme-reducer/theme-reducer.ts","redux/reducers/ui-reducer/ui-reducer.ts","redux/reducers/auth-reducer/auth-reducer.ts","redux/store/store.ts","Components/Common/ErrorSnackbar/ErrorSnackbar.tsx","Components/Login/Login.tsx","Components/Utils/PageNotFound/PageNotFound.tsx","themes/themes.ts","Components/Common/AddItemInput/AddItemInput.tsx","Components/Common/EditableSpan/EditableSpan.tsx","Components/TaskItem/TaskItem.tsx","Components/Todolist/Todolist.tsx","Components/Common/ToggleTheme/ToggleTheme.tsx","Components/Main/Main.tsx","Components/Common/CircularProgress/CircularProgress.tsx","App.tsx","index.tsx","Components/Utils/PageNotFound/PageNotFound.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","resultCodes","todolistAPI","get","response","data","title","post","todolistID","delete","put","taskAPI","taskID","model","authAPI","setTasks","tasks","type","removeTaskAC","addTaskAC","task","updateTaskAC","updateTask","changeTaskEntityStatusAC","entityStatus","payload","setInitializedApp","initializeStatus","setStatusProgress","progress","setOperationStatus","operationStatus","setUiError","error","handleServerNetworkError","dispatch","message","handleServerAppError","messages","length","change","getState","a","currentTask","find","t","id","resultCode","success","removeTodoListAC","addTodoListAC","renameTodoListAC","toggleTheme","isDarkTheme","initialState","slice","createSlice","name","isLoggedIn","reducers","setIsLoggedIn","state","action","value","authReducer","reducer","actions","rootReducer","combineReducers","todoLists","todolists","map","tl","filter","addedDate","order","tasksCopy","forEach","newTask","status","New","todoListId","copyTasks","entityTaskStatus","ui","theme","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useSelector","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","memo","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","Grid","container","display","alignItems","justifyContent","style","minHeight","backgroundColor","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","FormControlLabel","control","Checkbox","Button","color","disabled","isValid","dirty","PageNotFound","className","s","topHeader","starsec","starthird","starfourth","starfifth","lamp__wrap","lamp","cable","cover","inCover","bulb","light","error__content","error__message","message__title","lightTheme","createTheme","palette","mode","primary","main","secondary","typography","button","textTransform","components","MuiContainer","defaultProps","maxWidth","MuiPaper","styleOverrides","elevation8","position","padding","MuiListItem","MuiTypography","fontWeight","MuiButton","darkTheme","AddItemInput","addItem","placeHolder","console","log","useState","newTaskTittle","setNewTaskTittle","setError","addItemHandler","useCallback","trimmedTitle","trim","onChangeHandler","e","currentTarget","onKeyPressHandler","key","size","helperText","onChange","onKeyPress","IconButton","onClick","AddBox","EditableSpan","renameItem","editMode","setEditMode","input","setInput","onDoubleClickHandler","onBlurHandler","onBlur","autoFocus","onDoubleClick","TaskItem","removeTask","renameTask","changeTaskStatus","todoListID","renameTaskHandler","newTitle","onChangeStatusHandler","isDoneValue","checked","Completed","removeTaskHandler","ListItem","Delete","Todolist","removeTodolist","renameTodolist","changeTaskFilter","filterTdl","dispatchThunk","addTaskHandler","addTask","changeTaskStatusHandler","renameTodoList","tasksForRender","tasksJSX","useMemo","Paper","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","buttonStatusClass","Typography","List","bottom","ButtonGroup","ToggleTheme","onClickHandler","Main","toggleThemeHandler","logoutHandler","changeFilterTodoListAC","addTodoListHandler","CreateTodolist","removeTodoListHandler","renameTodolistHandler","useEffect","ts","items","todoListRender","tdl","AppBar","Toolbar","Box","height","LinearProgress","Container","spacing","CircularProgressWithLabel","top","left","right","CircularProgress","component","Math","round","App","setLocalStorageThemeHandler","localStorage","setItem","JSON","stringify","getLocalStorageThemeHandler","localTheme","getItem","parse","useLayoutEffect","timer","setInterval","clearInterval","ThemeProvider","ReactDOM","render","path","element","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"iRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICNMC,EAOAC,E,yEAfCC,E,OAAWC,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,+CACTC,QAAS,CACL,UAAW,2C,SAIPP,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,eAAAA,I,uBAAAA,I,kBAAAA,M,KAuDL,IC1EKO,ED0ECC,EAAc,WACD,OAAD,0HACMP,EAASQ,IAAT,eADN,cACXC,EADW,yBAEVA,EAASC,MAFC,8CADZH,EAAc,SAKFI,GAAgB,OAAD,0HACTX,EAASY,KAAT,cAAyE,CAACD,UADjE,cAC1BF,EAD0B,yBAEzBA,EAASC,MAFgB,8CAL3BH,EAAc,SASFM,GAAqB,OAAD,0HACdb,EAASc,OAAT,sBAAuDD,IADzC,cAC/BJ,EAD+B,yBAE9BA,EAASC,MAFqB,8CAThCH,EAAc,SAaFM,EAAoBF,GAAgB,OAAD,0HAC7BX,EAASe,IAAT,sBAAoDF,GAAc,CAACF,UADtC,cAC9CF,EAD8C,yBAE7CA,EAASC,MAFoC,8CAM/CM,EAAU,SACJH,GAAqB,OAAD,oHAClBb,EAASQ,IAAT,sBAAsFK,EAAtF,WADkB,sFAD1BG,EAAU,SAKLH,EAAoBF,GAAgB,OAAD,0HACtBX,EAASY,KAAT,sBAAqEC,EAArE,UAAyF,CAACF,UADpE,cACvCF,EADuC,yBAEtCA,EAASC,MAF6B,8CALxCM,EAAU,SASFH,EAAoBI,GAAiB,OAAD,oHACpCjB,EAASc,OAAT,sBAAuDD,EAAvD,kBAA2EI,IADvC,sFAT5CD,EAAU,SAeFH,EAAoBI,EAAgBC,GAAsC,OAAD,oHACzElB,EAASe,IAAT,sBAAqEF,EAArE,kBAAyFI,GAAUC,GAD1B,sFAKjFC,EAAU,WACN,OAAD,0HACenB,EAASQ,IAAT,YADf,cACFC,EADE,yBAEDA,EAASC,MAFR,8CADHS,EAAU,SAKPT,GAAwB,OAAD,0HACRV,EAASY,KAAT,cAAqEF,GAD7D,cACzBD,EADyB,yBAExBA,EAASC,MAFe,8CAL1BS,EAAU,WASH,OAAD,0HACYnB,EAASc,OAAT,eADZ,cACLL,EADK,yBAEJA,EAASC,MAFL,8CEvHNU,EAAW,SAACP,EAAmBQ,GACxC,MAAO,CAACC,KAAM,YAAaT,aAAWQ,UAE7BE,EAAe,SAACV,EAAmBI,GAC5C,MAAO,CAACK,KAAM,cAAeL,SAAQJ,eAE5BW,EAAY,SAAEX,EAAmBY,EAAcd,GACxD,MAAO,CAACW,KAAM,WAAYX,QAAOE,aAAWY,SAEnCC,EAAe,SAACC,GACzB,MAAO,CAACL,KAAM,cAAeK,eAEpBC,EAA2B,SAACf,EAAmBI,EAAcY,GACtE,MAAO,CAACP,KAAM,4BAA6BQ,QAAS,CAACjB,aAAWI,SAAOY,kBCd9DE,EAAoB,SAACC,GAC9B,MAAO,CAACV,KAAM,yBAAyBU,qBAE9BC,EAAoB,SAACC,GAC9B,MAAO,CAACZ,KAAM,kBAAmBY,aAExBC,EAAqB,SAACC,GAC/B,MAAO,CAACd,KAAM,0BAA0Bc,oBAE/BC,EAAa,SAACC,GACvB,MAAO,CAAChB,KAAM,eAAegB,W,SFZrBhC,O,qBAAAA,I,iBAAAA,I,sBAAAA,M,KGKJ,IAAMiC,EAA2B,SAACC,EAAkCC,GACxED,EAASH,EAAWI,IACpBD,EAASL,EAAmB,YAGlBO,EAAuB,SAAKF,EAAkC/B,GACpEA,EAASkC,SAASC,OAClBJ,EAASH,EAAW5B,EAASkC,SAAS,KAEtCH,EAASH,EAAW,eAExBG,EAASL,EAAmB,eCqDzB,IAiCMR,EAAa,SAACd,EAAoBI,EAAgB4B,GAArC,8CACtB,WAAOL,EAAUM,GAAjB,eAAAC,EAAA,6DACIP,EAASL,EAAmB,YACtBa,EAAcF,IAAWzB,MAAMR,GAAYoC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOlC,KAFxE,SAI2BD,EAAmBH,EAAYI,EAA/B,2BAA2C+B,GAAgBH,IAJtF,cAKiBnC,KAAK0C,aAAe9C,EAAY+C,UAEzCb,EAASd,EAAa,2BAAIsB,GAAgBH,KAC1CL,EAASL,EAAmB,eARpC,2CADsB,yDC/FbmB,EAAmB,SAACH,GAC7B,MAAO,CAAC7B,KAAM,kBAAmB6B,OAExBI,EAAgB,SAAC5C,EAAcwC,GACxC,MAAO,CAAC7B,KAAM,eAAgBQ,QAAS,CAACnB,QAAOwC,QAEtCK,EAAmB,SAACL,EAAYxC,GACzC,MAAO,CAACW,KAAM,wBAAyBQ,QAAS,CAACqB,KAAIxC,WCiDlD,I,QCzCA,IAAM8C,EAAc,SAACC,GACxB,MAAO,CAACpC,KAAK,eAAeoC,gBCZ1BC,EAAiC,CACnC3B,kBAAkB,EAClBI,gBAAiB,OACjBF,SAAU,EACVI,MAAO,M,YCAJsB,EAAQC,YAAY,CACvBC,KAAK,OACLH,aARiB,CACjBI,YAAY,GAQZC,SAAS,CACLC,cADK,SACUC,EAAOC,GAClBD,EAAMH,WAAaI,EAAOrC,QAAQsC,UAIjCC,EAAcT,EAAMU,QAC1BL,EAAiBL,EAAMW,QAAvBN,cCDDO,EAAcC,YAAgB,CAChCC,UJCG,WAA4H,IAAlGA,EAAiG,uDAA/D,GAAIP,EAA2D,uCAC9H,OAAQA,EAAO7C,MACX,IAAK,gBACD,OAAO6C,EAAOQ,UAAUC,KAAI,SAAAC,GAAE,kCAASA,GAAT,IAAaC,OAAQ,MAAMjD,aAAa,YAC1E,IAAK,kBACD,OAAO,YAAI6C,EAAUI,QAAO,SAAA5B,GAAC,OAAIA,EAAEC,KAAOgB,EAAOhB,OACrD,IAAK,eACD,MAAM,CAAN,2BACOgB,EAAOrC,SADd,IAEIiD,UAAW,GACXC,MAAO,EACPF,OAAQ,MACRjD,aAAa,UALjB,mBAOO6C,IACX,IAAK,wBACD,OAAO,YAAIA,EAAUE,KAAI,SAAA1B,GAAC,OAAIA,EAAEC,KAAOgB,EAAOrC,QAAQqB,GAAxB,2BACvBD,GADuB,IAE1BvC,MAAOwD,EAAOrC,QAAQnB,QACtBuC,MACR,IAAK,yBACD,OAAO,YAAIwB,EAAUE,KAAI,SAAA1B,GAAC,OAAIA,EAAEC,KAAOgB,EAAOrC,QAAQqB,GAAxB,2BACvBD,GADuB,IAE1B4B,OAAQX,EAAOrC,QAAQgD,SACvB5B,MACR,IAAK,gCACD,OAAO,YAAIwB,EAAUE,KAAI,SAAA1B,GAAC,OAAIA,EAAEC,KAAOgB,EAAOrC,QAAQqB,GAAxB,2BACvBD,GADuB,IAE1BrB,aAAasC,EAAOrC,QAAQD,eAC9BqB,MAEN,QACI,OAAOwB,IIhCfrD,MNZG,WAAgI,IAA1GA,EAAyG,uDAAlF,GAAI8C,EAA8E,uCAClI,OAAQA,EAAO7C,MACX,IAAK,gBACD,IAAM2D,EAAS,eAAO5D,GAItB,OAHA8C,EAAOQ,UAAUO,SAAQ,SAACL,GACtBI,EAAUJ,EAAG1B,IAAM,MAEhB8B,EAEX,IAAK,YACD,OAAO,2BACA5D,GADP,kBAEK8C,EAAOtD,WAFZ,YAE6BsD,EAAO9C,SAExC,IAAK,cACD,OAAO,2BACAA,GADP,kBAEK8C,EAAOtD,WAAaQ,EAAM8C,EAAOtD,YAAYiE,QAAO,SAAArD,GAAI,OAAIA,EAAK0B,KAAOgB,EAAOlD,YAExF,IAAK,WACD,IAAIkE,EAAiB,2BAAOhB,EAAO1C,MAAd,IAAoBd,MAAOwD,EAAOxD,MAAOyE,OAAQtF,EAAauF,MACnF,OAAO,2BACAhE,GADP,kBAEK8C,EAAOtD,WAFZ,CAE0BsE,GAF1B,mBAEsC9D,EAAM8C,EAAOtD,gBAEvD,IAAK,cACD,OAAO,2BACAQ,GADP,kBAEK8C,EAAOxC,WAAW2D,WAAcjE,EAAM8C,EAAOxC,WAAW2D,YAAaV,KAClE,SAAAnD,GAAI,OAAIA,EAAK0B,KAAOgB,EAAOxC,WAAWwB,GAAKgB,EAAOxC,WAAaF,OAI3E,IAAK,eACD,OAAO,2BACAJ,GADP,kBAEK8C,EAAOrC,QAAQqB,GAAK,KAE7B,IAAK,kBACD,IAAIoC,EAAS,eAAOlE,GAEpB,cADOkE,EAAUpB,EAAOhB,IACjBoC,EACX,IAAK,4BACD,OAAO,2BACAlE,GADP,kBAEH8C,EAAOrC,QAAQjB,WAAYQ,EAAM8C,EAAOrC,QAAQjB,YAAY+D,KACzD,SAAAnD,GAAI,OAAIA,EAAK0B,KAAOgB,EAAOrC,QAAQb,OAA3B,2BAAuCQ,GAAvC,IAA4C+D,iBAAiBrB,EAAOrC,QAAQD,eAAeJ,OAGvG,QACI,OAAOJ,IMrCfoE,GFTG,WAA6G,IAA1FvB,EAAyF,uDAA/DP,EAAcQ,EAAiD,uCAC/G,OAAQA,EAAO7C,MACX,IAAK,yBACD,OAAO,2BACA4C,GADP,IAEIlC,iBAAkBmC,EAAOnC,mBAEjC,IAAK,kBACD,OAAO,2BACAkC,GADP,IAEIhC,SAAUiC,EAAOjC,WAEzB,IAAK,0BACD,OAAO,2BACAgC,GADP,IAEI9B,gBAAiB+B,EAAO/B,kBAEhC,IAAK,eACD,OAAO,2BACA8B,GADP,IAEI5B,MAAM6B,EAAO7B,QAErB,QACI,OAAO4B,IEbfwB,MHnBG,WAAgG,IAA1ExB,EAAyE,uDAAhD,CAACR,aAAY,GAAOS,EAA4B,uCAClG,OAAQA,EAAO7C,MACX,IAAK,eACD,OAAO,2BACA4C,GADP,IAEIR,YAAYS,EAAOT,cAG3B,QACI,OAAOQ,IGWfyB,KAAMtB,IAIGuB,GAAQC,YAAe,CAChCvB,QAASE,EACTsB,WAAW,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,QAMtEvG,OAAOkG,MAAQA,G,qIClCTM,GAAQC,IAAMC,YAAuC,SACvDC,EAAOC,GACP,OAAO,kBAAC,KAAD,eAAUC,UAAW,EAAGD,IAAKA,EAAKE,QAAQ,UAAaH,OAG3D,SAASI,KACZ,IAAMnE,EAAQoE,aAAY,SAACxC,GAAD,OAA4BA,EAAMuB,GAAGnD,SACzDE,EAAWmE,cAEXC,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJtE,EAASH,EAAW,QAGxB,OACI,kBAAC0E,GAAA,EAAD,CAAUC,OAAQ1E,EAAO2E,iBAAkB,IAAMC,QAASN,GACtD,kBAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,SACrD/E,ICTV,IAAMgF,GAAQnB,IAAMoB,MAAK,WAC5B,IAAM/E,EAAWmE,cAEXjD,EAAcgD,aAAY,SAACxC,GAAD,OAA4BA,EAAMwB,MAAMhC,eAElE8D,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAAoD,GAW1D,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAAShF,OAAS,IAChCoF,EAAOJ,SAAW,oDAFlBI,EAAOJ,SAAW,WAIfI,GAEXE,SAAU,SAACH,GHqBE,IAACrH,EGpBV8B,GHoBU9B,EGpBKqH,EHoBN,uCAAsC,WAAMvF,GAAN,eAAAO,EAAA,sEAEnDP,EAASL,EAAmB,YAFuB,SAG5BhB,EAAcT,GAHc,QAG7CD,EAH6C,QAItC2C,aAAe9C,EAAY+C,SACpCb,EAASyB,EAAc,CAACG,OAAM,KAC9B5B,EAASL,EAAmB,gBAE5BO,EAAyCF,EAAU/B,GACnD+B,EAASL,EAAmB,YATmB,gDAYnDI,EAAyBC,EAAU,KAAEC,SACrCD,EAASL,EAAmB,WAbuB,yDAAtC,wDGnBTqF,EAAOW,eAIf,OACI,kBAACC,GAAA,EAAD,CAAMC,WAAS,EACTC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,MAAO,CAACC,UAAW,QAASC,gBAAiBjF,EAAc,UAAY,0BAEzE,kBAAC0E,GAAA,EAAD,CAAMQ,MAAI,EAACJ,eAAgB,UACvB,kBAACK,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,sDACI,uBAAGC,KAAM,wCACNC,OAAQ,SADX,UAIJ,sEACA,wDACA,8CAGJ,0BAAMd,SAAUV,EAAOyB,cACnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,eACIC,MAAM,QACNC,OAAO,UACH7B,EAAO8B,cAAc,WAE5B9B,EAAO+B,QAAQ5B,OAASH,EAAOQ,OAAOL,OACnC,6BAAMH,EAAOQ,OAAOL,OACxB,kBAACwB,GAAA,EAAD,eACI7H,KAAK,WACL8H,MAAM,WACNC,OAAO,UACH7B,EAAO8B,cAAc,cAE5B9B,EAAO+B,QAAQ3B,UAAYJ,EAAOQ,OAAOJ,UACtC,6BAAMJ,EAAOQ,OAAOJ,UACxB,kBAAC4B,GAAA,EAAD,CACIJ,MAAO,cACPK,QAAS,kBAACC,GAAA,EAAalC,EAAO8B,cAAc,iBAEhD,kBAACK,GAAA,EAAD,CACIrI,KAAM,SACNkF,QAAS,YACToD,MAAO,UACPC,UAAWrC,EAAOsC,UAAYtC,EAAOuC,OAJzC,WAUR,kBAACtD,GAAD,Y,oBC/FPuD,GAAe,WACxB,OACI,yBAAKC,UAAWC,KAAE7B,WACd,4BAAQ4B,UAAWC,KAAEC,YAErB,6BACI,yBAAKF,UAAWC,KAAEE,UAClB,yBAAKH,UAAWC,KAAEG,YAClB,yBAAKJ,UAAWC,KAAEI,aAClB,yBAAKL,UAAWC,KAAEK,aAItB,yBAAKN,UAAWC,KAAEM,YACd,yBAAKP,UAAWC,KAAEO,MACd,yBAAKR,UAAWC,KAAEQ,QAClB,yBAAKT,UAAWC,KAAES,QAClB,yBAAKV,UAAWC,KAAEU,SACd,yBAAKX,UAAWC,KAAEW,QAEtB,yBAAKZ,UAAWC,KAAEY,UAI1B,6BAASb,UAAWC,KAAE5H,OAElB,yBAAK2H,UAAWC,KAAEa,gBACd,yBAAKd,UAAWC,KAAEc,gBACd,wBAAIf,UAAWC,KAAEe,gBAAjB,uB,6BC9BXC,GAAaC,aAAY,CAClCC,QAAS,CACLC,KAAM,QACNC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,YAGdE,WAAY,CACRC,OAAQ,CACJC,cAAe,SAGvBC,WAAY,CACRC,aAAc,CACVC,aAAc,CACVC,UAAU,IAIlBC,SAAU,CACNC,eAAgB,CACZC,WAAY,CACRC,SAAU,WACVzD,UAAW,QACX0D,QAAS,UAIrBC,YAAa,CACTP,aAAc,CACV1E,GAAI,CACAoB,eAAgB,mBAI5B8D,cAAe,CACXR,aAAc,CACVxD,QAAS,OACTE,eAAgB,gBAChB+D,WAAY,OACZ/F,QAAS,OAGjBgG,UAAW,CACPV,aAAc,CACV1E,GAAI,CACAwC,MAAO,QACP,UAAW,CACPjB,gBAAiB,wBAS5B8D,GAAYtB,aAAY,CACjCC,QAAS,CACLC,KAAM,OACNC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,YAGdE,WAAY,CACRC,OAAQ,CACJC,cAAe,SAGvBC,WAAY,CAERC,aAAc,CACVC,aAAc,CACVC,UAAU,IAGlBC,SAAU,CACNC,eAAgB,CACZC,WAAY,CACRC,SAAU,WACVzD,UAAW,QACX0D,QAAS,UAIrBC,YAAa,CACTP,aAAc,CACV1E,GAAI,CACAoB,eAAgB,mBAI5B8D,cAAe,CACXR,aAAc,CACVxD,QAAS,OACTE,eAAgB,gBAChB+D,WAAY,OACZ/F,QAAS,OAGjBgG,UAAW,CACPV,aAAc,CACV1E,GAAI,CACAwC,MAAO,QACP,UAAW,CACPjB,gBAAiB,yB,8GCrG5B+D,GAAevG,IAAMoB,MAAK,YAAkE,IAAvDoF,EAAsD,EAAtDA,QAAS9K,EAA6C,EAA7CA,aAAa+K,EAAgC,EAAhCA,YACpEC,QAAQC,IAAI,QACZ,MAA0CC,mBAAS,IAAnD,oBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA0BF,mBAAiB,IAA3C,oBAAOzK,EAAP,KAAc4K,EAAd,KAEMC,EAAiBC,uBAAY,WAC/B,IAAMC,EAAeL,EAAcM,OAC/BD,EACAV,EAAQU,GAERH,EAAS,qGAEbD,EAAiB,MAClB,CAACN,EAASK,IAEPO,EAAkBH,uBAAY,SAACI,GACjCP,EAAiBO,EAAEC,cAAcrJ,OACjC8I,EAAS,MACV,IAEGQ,EAAoBN,uBAAY,SAACI,GACrB,UAAVA,EAAEG,KACFR,MAEL,CAACA,IAEJ,OACI,6BACI,kBAAChE,GAAA,EAAD,CACIU,SAA2B,YAAjBhI,EACV2E,QAAS,WACT4C,MAAOwD,EACPgB,KAAM,QACNtL,QAASA,EACTuL,WAAYvL,EACZ8B,MAAO4I,EACPc,SAAUP,EACVQ,WAAYL,IAEhB,kBAACM,GAAA,EAAD,CACInE,SAA2B,YAAjBhI,EACV+L,KAAM,QACNK,QAASd,GAET,kBAACe,GAAA,EAAD,W,UC9CHC,GAAehI,IAAMoB,MAC9B,YAIgC,IAHlB5G,EAGiB,EAHjBA,MACAsJ,EAEiB,EAFjBA,UACAmE,EACiB,EADjBA,WAEVvB,QAAQC,IAAI,iBACZ,MAAgCC,oBAAS,GAAzC,oBAAOsB,EAAP,KAAiBC,EAAjB,KACA,EAA0BvB,mBAAS,KAAnC,oBAAOwB,EAAP,KAAcC,EAAd,KAEMjB,EAAkBH,uBAAY,SAACI,GAAD,OAChCgB,EAAShB,EAAEC,cAAcrJ,SAAQ,CAACoK,IAChCC,EAAuBrB,uBAAY,WACrCkB,GAAaD,GACbG,EAAS7N,KACV,CAAC0N,EAAU1N,IACR+N,EAAgBtB,uBAAY,WAC9BkB,GAAaD,GACbD,EAAWG,KACZ,CAACF,EAASE,EAAMH,IACbV,EAAoBN,uBAAa,SAACI,GACtB,UAAVA,EAAEG,MACFW,GAAaD,GACbD,EAAWG,MAEjB,CAACF,EAASE,EAAMH,IAElB,OAAOC,EACD,kBAAClF,GAAA,EAAD,CACEyE,KAAM,QACNxJ,MAAOmK,EACPT,SAAUP,EACVoB,OAAQD,EACRX,WAAYL,EACZkB,WAAW,IACb,0BAAM3E,UAAWA,EAAW4E,cAAeJ,GAC5C9N,M,oBC7BAmO,GAAW3I,IAAMoB,MAAK,YAOsB,IANjB9F,EAMgB,EANhBA,KACAsN,EAKgB,EALhBA,WACAC,EAIgB,EAJhBA,WACAxJ,EAGgB,EAHhBA,iBACAyJ,EAEgB,EAFhBA,iBACAC,EACgB,EADhBA,WAG1BC,EAAoB/B,uBAAY,SAACgC,GACnCJ,EAAWvN,EAAK0B,GAAI+L,EAAYE,KACjC,CAAC3N,EAAK0B,GAAI+L,EAAYF,IAEnBK,EAAwBjC,uBAAY,SAACI,GACvC,IAAM8B,EAAc9B,EAAEC,cAAc8B,QACpCN,EACIC,EAAYzN,EAAK0B,GAAImM,EAAcxP,EAAa0P,UAAY1P,EAAauF,OAE9E,CAAC5D,EAAK0B,GAAI+L,EAAYD,IAEnBQ,EAAoBrC,uBAAY,WAClC2B,EAAWG,EAAYzN,EAAK0B,MAC7B,CAAC1B,EAAK0B,GAAI+L,EAAYH,IAEzB,OACI,kBAACW,GAAA,EAAD,CAAU/B,IAAKlM,EAAK0B,IAChB,6BACI,kBAACuG,GAAA,EAAD,CACIkE,KAAM,QACN2B,UAAW9N,EAAK2D,OAChB0I,SAAUuB,IAEd,kBAAClB,GAAD,CACIC,WAAYe,EACZxO,MAAOc,EAAKd,SAEpB,kBAACqN,GAAA,EAAD,CACIJ,KAAM,QACN/D,SAA+B,YAArBrE,EACVyI,QAASwB,GACZ,kBAACE,GAAA,EAAD,W,oBCyFFC,GAzHEzJ,IAAMoB,MAAK,YAS4B,IARd1G,EAQa,EARbA,WACAgB,EAOa,EAPbA,aACAlB,EAMa,EANbA,MACAU,EAKa,EALbA,MACAwO,EAIa,EAJbA,eACAC,EAGa,EAHbA,eACAC,EAEa,EAFbA,iBACAC,EACa,EADbA,UAGhCC,EAAgBtJ,cAEhB8I,EAAoBrC,uBAAY,SAACvM,EAAoBI,GACvDgP,EdqDkB,SAACpP,EAAoBI,GAArB,8CAAmD,WAAMuB,GAAN,SAAAO,EAAA,6DACzEP,EAASL,EAAmB,YAC5BK,EAASZ,EAAyBf,EAAWI,EAAO,YAFqB,SAGlDD,EAAmBH,EAAYI,GAHmB,cAI5DP,KAAK0C,aAAe9C,EAAY+C,UAEzCb,EAASjB,EAAaV,EAAYI,IAClCuB,EAASL,EAAmB,eAPyC,2CAAnD,sDcrDJ4M,CAAWlO,EAAYI,MACtC,CAACgP,IAEEC,EAAiB9C,uBAAY,SAACzM,GAChCsP,EdgCe,SAACpP,EAAoBF,GAArB,8CAAkD,WAAM6B,GAAN,eAAAO,EAAA,sEAEjEP,EAASL,EAAmB,YAFqC,SAG1CnB,EAAgBH,EAAYF,GAHc,QAG3DF,EAH2D,QAIpD2C,aAAe9C,EAAY+C,SAEpCb,EAAShB,EAAUX,EAAYJ,EAASC,KAAKkI,KAAMjI,IACnD6B,EAASL,EAAmB,eAE5BO,EAAyCF,EAAS/B,GATW,gDAajE8B,EAAyBC,EAAS,KAAEC,SAb6B,yDAAlD,sDchCD0N,CAAQtP,EAAYF,MACnC,CAACsP,EAAepP,IAEbsO,EAAoB/B,uBAAY,SAACnM,EAAgBJ,EAAoBF,GACvEsP,EAActO,EAAWd,EAAYI,EAAQ,CAACN,aAC/C,CAACsP,IAEEG,EAA0BhD,uBAAY,SAACvM,EAAoBI,EAAgBmE,GAC7E6K,EAActO,EAAWd,EAAYI,EAAQ,CAACmE,cAC/C,CAAC6K,IAGEI,EAAiBjD,uBAAY,SAACgC,GAChCU,EAAejP,EAAYuO,KAC5B,CAACU,EAAgBjP,IAEhByP,EAAiBjP,EACH,WAAd2O,IACAM,EAAiBjP,EAAMyD,QAAO,SAAA5B,GAAC,OAAIA,EAAEkC,SAAWtF,EAAauF,QAE/C,cAAd2K,IACAM,EAAiBjP,EAAMyD,QAAO,SAAA5B,GAAC,OAAIA,EAAEkC,SAAWtF,EAAa0P,cAKjE,IAAMe,EAAWC,mBAAQ,kBAAMF,EAAe1L,KAAI,SAAA1B,GAEtC,OADJ2J,QAAQC,IAAR,UAAe5J,EAAEvC,MAAjB,cAA4BuC,EAAEC,GAA9B,MAEQ,kBAACsN,GAAA,EAAD,CAAO9C,IAAKzK,EAAEC,GAAIsF,MAAO,CAACY,OAAQ,YAC9B,kBAACyF,GAAD,CACItJ,iBAAkBtC,EAAEsC,iBACpBmI,IAAKzK,EAAEC,GACP4L,WAAYU,EACZT,WAAYG,EACZF,iBAAkBmB,EAClB3O,KAAMyB,EACNgM,WAAYrO,UAK9B,CAACuP,EAAyBX,EAAmBN,EAAmBmB,EAAezP,IAE/E6P,EAAoBtD,uBAAY,WAC9B2C,EAAiB,MAAOlP,KAE5B,CAACkP,EAAkBlP,IACjB8P,EAAuBvD,uBAAY,WACjC2C,EAAiB,SAAUlP,KAE/B,CAACkP,EAAkBlP,IACjB+P,EAA0BxD,uBAAY,WACpC2C,EAAiB,YAAalP,KAElC,CAACkP,EAAkBlP,IAEjBgQ,EAAoBzD,uBAAa,SAACtI,GAAD,OACnCA,IAAWkL,EAAY,YAAc,YACxC,CAACA,IAGF,OACQ,6BACI,kBAACc,GAAA,EAAD,KACI,kBAAC3C,GAAD,CAAcxN,MAAOA,EAAOyN,WAAYiC,KAE5C,6BACI,kBAAC3D,GAAD,CACIE,YAAa,WACbD,QAASuD,EACTrO,aAAcA,KAGtB,kBAACkP,GAAA,EAAD,KACKR,GAEL,yBAAK9H,MAAO,CAACH,QAAQ,OAAQE,eAAe,gBAAgBwI,OAAQ,OAAQ7E,SAAU,aAClF,kBAAC8E,GAAA,EAAD,CAAarD,KAAM,QAASpH,QAAS,aACjC,kBAACmD,GAAA,EAAD,CAAQsE,QAASyC,EAAmB9G,MAAOiH,EAAkB,QAA7D,OAGA,kBAAClH,GAAA,EAAD,CAAQsE,QAAS0C,EAAsB/G,MAAOiH,EAAkB,WAAhE,UAGA,kBAAClH,GAAA,EAAD,CAAQsE,QAAS2C,EAAyBhH,MAAOiH,EAAkB,cAAnE,cAKJ,kBAAC7C,GAAA,EAAD,CACInE,SAA2B,YAAjBhI,EACV+L,KAAM,QACNK,QAAS,WACL4B,EAAehP,KAEnB,kBAAC8O,GAAA,EAAD,Y,0CCjIXuB,GAAyC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,eAAezN,EAAiB,EAAjBA,YAGnE,OACI,kBAACsK,GAAA,EAAD,CACIC,QAASkD,EACTvH,MAAM,WAELlG,EACG,kBAAC,KAAD,MAEA,kBAAC,KAAD,QCSH0N,GAAOjL,IAAMoB,MAAM,WAC5B,IAAM/E,EAAWmE,cAEX5C,EAAa2C,aAAY,SAACxC,GAAD,OAA4BA,EAAMyB,KAAK5B,cAEhE3B,EAAkBsE,aAAY,SAACxC,GAAD,OAA4BA,EAAMuB,GAAGrD,mBACnEsB,EAAcgD,aAAY,SAACxC,GAAD,OAA4BA,EAAMwB,MAAMhC,eAClEgB,EAAYgC,aAAY,SAACxC,GAAD,OAA4BA,EAAMQ,aAC1DrD,EAAQqF,aAAY,SAACxC,GAAD,OAA4BA,EAAM7C,SAGtDgQ,EAAqBjE,uBAAa,WACpC5K,EAASiB,GAAaC,MACxB,CAAClB,EAASkB,IACN4N,EAAgBlE,uBAAa,WAC/B5K,EXmCc,uCAAiB,WAAMA,GAAN,eAAAO,EAAA,sEAE/BP,EAASL,EAAmB,YAFG,SAGRhB,IAHQ,QAGzBV,EAHyB,QAIlB2C,aAAe9C,EAAY+C,SAEpCb,EAASyB,EAAc,CAACG,OAAM,KAC9B5B,EAASL,EAAmB,gBAE5BO,EAAyBF,EAAU/B,GACnC+B,EAASL,EAAmB,YAVD,gDAa/BI,EAAyBC,EAAU,KAAEC,SACrCD,EAASL,EAAmB,WAdG,yDAAjB,yDWlChB,CAACK,IAGGuN,EAAmB3C,uBAAY,SAACtI,EAA0BjE,GAC5D2B,EflC8B,SAACsC,EAA0B3B,GAC7D,MAAO,CAAC7B,KAAM,yBAA0BQ,QAAS,CAACqB,KAAI2B,WeiCzCyM,CAAuBzM,EAAQjE,MACzC,CAAC2B,IAIEgP,EAAqBpE,uBAAY,SAAUzM,GAC7C6B,EdqBsB,SAAC7B,GAAD,8CAA8B,WAAM6B,GAAN,eAAAO,EAAA,sEAEpDP,EAASL,EAAmB,YAFwB,SAG7B5B,EAA2BI,GAHE,QAG9CF,EAH8C,QAIvC2C,aAAe9C,EAAY+C,SAEpCb,EAASe,EAAc5C,EAAOF,EAASC,KAAKkI,KAAKzF,KACjDX,EAASL,EAAmB,eAE5BO,EAA0CF,EAAS/B,GATH,gDAapD8B,EAAyBC,EAAS,KAAEC,SAbgB,yDAA9B,sDcrBbgP,CAAe9Q,MACzB,CAAC6B,IAEEkP,EAAwBtE,uBAAY,SAACvM,GACvC2B,EdkCsB,SAAC3B,GAAD,8CAAmC,WAAM2B,GAAN,SAAAO,EAAA,6DAC7DP,ED3EO,CAAClB,KAAM,gCAAiCQ,QAAS,CAACqB,GC2EnBtC,ED3EuBgB,aC2EZ,aACjDW,EAASL,EAAmB,YAFiC,SAGtC5B,EAA2BM,GAHW,cAIhDuC,aAAe9C,EAAY+C,UAEpCb,EAASc,EAAiBzC,IAC1B2B,EAASL,EAAmB,eAP6B,2CAAnC,sDclCb0N,CAAehP,MACzB,CAAC2B,IAEEmP,EAAwBvE,uBAAY,SAACvM,EAAoBuO,GAC3D5M,EdwCsB,SAAC3B,EAAoBF,GAArB,8CAAkD,WAAM6B,GAAN,SAAAO,EAAA,6DAC5EP,EAASL,EAAmB,YADgD,SAErD5B,EAA2BM,EAAYF,GAFc,cAG/DyC,aAAe9C,EAAY+C,UAEpCb,EAASgB,EAAiB3C,EAAYF,IACtC6B,EAASL,EAAmB,eAN4C,2CAAlD,sDcxCb2N,CAAejP,EAAYuO,MACrC,CAAC5M,IAEJoP,qBAAU,WACNpP,EdLoB,uCAAiB,WAAMA,GAAN,eAAAO,EAAA,+EAEdxC,IAFc,OAE/BE,EAF+B,OAGrC+B,ED7DG,CAAClB,KAAM,gBAAiBqD,UC6DLlE,IACtB+B,EAAST,GAAkB,IAC3BtB,EAASyE,SAAQ,SAAC2M,GFCF,IAAChR,EEAb2B,GFAa3B,EEAKgR,EAAG1O,GFAT,uCAAmC,WAAMX,GAAN,eAAAO,EAAA,sEAChC/B,EAAiBH,GADe,OAE3B,QADtBJ,EADiD,QAE1CC,KAAK4B,OACdE,EAASpB,EAASP,EAAYJ,EAASC,KAAKoR,QAHO,2CAAnC,2DENqB,gDASrCtP,EAAST,GAAkB,IAC3BQ,EAAyBC,EAAS,KAAEC,SAVC,yDAAjB,yDcMrB,CAACD,IAGJ,IAAMuP,EAAiBvB,mBAAS,WAC7B,OAAQ9L,EAAUE,KAAI,SAACoN,GACdnF,QAAQC,IAAR,oBAAyBkF,EAAIrR,QAC7B,IAAI2P,EAAiBjP,EAAM2Q,EAAI7O,IAC/B,OACI,kBAACiF,GAAA,EAAD,CAAMQ,MAAI,EAAC+E,IAAKqE,EAAI7O,IAChB,kBAACsN,GAAA,EAAD,CAAOlK,UAAW,GACd,kBAAC,GAAD,CACI1E,aAAcmQ,EAAInQ,aAClB8L,IAAKqE,EAAI7O,GACTtC,WAAYmR,EAAI7O,GAChBxC,MAAOqR,EAAIrR,MACXU,MAAOiP,EACPT,eAAgB6B,EAChB5B,eAAgB6B,EAChB5B,iBAAkBA,EAClBC,UAAWgC,EAAIlN,gBAMzC,CAACJ,EAAUrD,IAEb,OACI,yBAAKoH,MAAO,CAACC,UAAW,QAASC,gBAAiBjF,EAAc,UAAY,0BACxE,kBAACuO,GAAA,EAAD,CAAQ9F,SAAU,UACd,kBAAC+F,GAAA,EAAD,CAAS9K,GAAI,CAACoB,eAAgB,kBAC1B,kBAAC2J,GAAA,EAAD,KACI,kBAACnE,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAAC,GAAD,CAAamD,eAAgBE,EAAoB3N,YAAaA,KAElE,kBAACoN,GAAA,EAAD,kBAGC/M,GAAc,kBAAC4F,GAAA,EAAD,CAAQsE,QAASqD,GAAjB,YAEnB,yBAAK7I,MAAO,CAAC2J,OAAQ,QACI,YAApBhQ,GAAiC,kBAACiQ,GAAA,EAAD,QAGtC,kBAACC,GAAA,EAAD,KACI,kBAAClK,GAAA,EAAD,CAAMC,WAAS,EAACI,MAAO,CAAC2D,QAAS,kBAC7B,kBAACM,GAAD,CAAcE,YAAa,WAAYD,QAAS6E,KAEpD,kBAACpJ,GAAA,EAAD,CAAMC,WAAS,EAACkK,QAAS,GACpBR,IAGb,kBAACtL,GAAD,U,UCpHL,SAAS+L,GAA0BnM,GACtC,IAAM3C,EAAcgD,aAAY,SAACxC,GAAD,OAA4BA,EAAMwB,MAAMhC,eACxE,OACI,kBAACyO,GAAA,EAAD,CAAK1J,MAAO,CAACC,UAAW,QAASC,gBAAiBjF,EAAc,UAAY,yBACxE0D,GAAI,CACJqL,IAAK,EACLC,KAAM,EACN1B,OAAQ,EACR2B,MAAO,EACPxG,SAAU,WACV7D,QAAS,OACTC,WAAY,SACZC,eAAgB,WAEhB,kBAACoK,GAAA,EAAD,eAAkBpM,QAAQ,eAAkBH,IAC5C,kBAAC8L,GAAA,EAAD,CAAK/K,GAAI,CACLqL,IAAK,EACLC,KAAM,EACN1B,OAAQ,EACR2B,MAAO,EACPxG,SAAU,WACV7D,QAAS,OACTC,WAAY,SACZC,eAAgB,WAEhB,kBAACsI,GAAA,EAAD,CAAYtK,QAAQ,UAAUqM,UAAU,MAAMjJ,MAAM,kBAApD,UACQkJ,KAAKC,MAAM1M,EAAMjC,OADzB,QCnBhB,IAiDe4O,GAjDH7M,IAAMoB,MAAK,WACnBsF,QAAQC,IAAI,OAEZ,IAAMtK,EAAWmE,cACXjD,EAAcgD,aAAY,SAACxC,GAAD,OAA4BA,EAAMwB,MAAMhC,eAElEK,EAAa2C,aAAY,SAACxC,GAAD,OAA4BA,EAAMyB,KAAK5B,cAChE/B,EAAmB0E,aAAY,SAACxC,GAAD,OAA4BA,EAAMuB,GAAGzD,oBACpEE,EAAWwE,aAAY,SAACxC,GAAD,OAA4BA,EAAMuB,GAAGvD,YAE5D+Q,EAA8B7F,uBAAY,SAAC1J,GAC7CwP,aAAaC,QAAQ,cAAeC,KAAKC,UAAU3P,MACpD,IACG4P,EAA8BlG,uBAAY,WAC5C,IAAImG,EAAaL,aAAaM,QAAQ,eAEhChR,EAASiB,EADA,OAAf8P,GAE2BA,GAAcH,KAAKK,MAAMF,OACrD,CAAC/Q,IAaJ,OAVAkR,2BAAgB,WACZJ,MACD,CAACA,IACJ1B,qBAAU,WACNqB,EAA4BvP,KAC7B,CAACuP,EAA6BvP,IACjCgQ,2BAAgB,WACZlR,EbHqB,uCAAiB,WAAMA,GAAN,iBAAAO,EAAA,sEAIlCb,EAAW,EACdyR,EAAQC,aAAY,WACb1R,EAAW,IAEXM,EAASP,EADTC,GAAY,MAGZ2R,cAAcF,GACdnR,EAAST,GAAkB,OAEhC,KAbmC,SAcfZ,IAde,cAezBiC,aAAe9C,EAAY+C,QACpCb,EAASyB,EAAc,CAACG,OAAM,KAE9B5B,EAASyB,EAAc,CAACG,OAAM,KAlBI,yGAAjB,yDaItB,CAAC5B,IAECR,EAQD,kBAAC8R,GAAA,EAAD,CAAepO,MAAOhC,EAAc+I,GAAYvB,IAC5C,oCACKlJ,GAAoB+B,EACf,kBAACqN,GAAD,MACA,kBAAC9J,GAAD,QAVV,kBAACwM,GAAA,EAAD,CAAepO,MAAOhC,EAAc+I,GAAYvB,IAC5C,kBAACsH,GAAD,CAA2BpO,MAAOlC,IADtC,SCnCZ6R,IAASC,OACL,kBAAC,IAAD,CAAUpO,MAAOA,IACb,kBAAC,KAAD,KACI,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOqO,KAAM,YAAaC,QAAS,kBAAC,GAAD,QACnC,kBAAC,KAAD,CAAOD,KAAM,IAAKC,QAAS,kBAAC,GAAD,QAC3B,kBAAC,KAAD,CAAOD,KAAM,SAAUC,QAAS,kBAAC5M,GAAD,QAChC,kBAAC,KAAD,CAAO2M,KAAM,OAAQC,QAAS,kBAAC,GAAD,QAC9B,kBAAC,KAAD,CAAOD,KAAM,KAAMC,QAAS,kBAAC,KAAD,CAAUC,GAAI,cAGzCC,SAASC,eAAe,SzBqHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtS,GACLuK,QAAQvK,MAAMA,EAAMG,a,mB0BhJ5BoS,EAAOC,QAAU,CAAC,UAAY,gCAAgC,aAAa,iCAAiC,QAAU,8BAA8B,SAAW,+BAA+B,UAAY,gCAAgC,WAAa,iCAAiC,UAAY,gCAAgC,SAAW,+BAA+B,MAAQ,4BAA4B,eAAiB,qCAAqC,eAAiB,qCAAqC,eAAiB,qCAAqC,eAAiB,qCAAqC,cAAgB,oCAAoC,WAAa,iCAAiC,cAAc,kCAAkC,cAAc,kCAAkC,cAAc,kCAAkC,cAAgB,oCAAoC,iBAAiB,qCAAqC,iBAAiB,qCAAqC,iBAAiB,qCAAqC,KAAO,2BAA2B,KAAO,2BAA2B,MAAQ,4BAA4B,MAAQ,4BAA4B,WAAW,+BAA+B,KAAO,2BAA2B,MAAQ,4BAA4B,WAAa,oC","file":"static/js/main.627a9f9f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport {RequestStatusType} from \"../redux/reducers/ui-reducer/ui-reducer\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    headers: {\r\n        \"API-KEY\": \"b701020f-78a1-4daa-8002-6ee349adc8a0\"\r\n    }\r\n})\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgently,\r\n    Later,\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description?: string\r\n    todoListId?: string\r\n    order?: number\r\n    status: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n    addedDate?: string\r\n    entityTaskStatus?:RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeResponseType = {\r\n    id:number\r\n    email: string\r\n    login:string\r\n}\r\nexport type CommonResponseType<T> = {\r\n    data: T\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: 0 | 1\r\n}\r\n\r\n\r\nexport const todolistAPI = {\r\n    async getTodolists() {\r\n        const response = await instance.get<TodolistType[]>(`/todo-lists`)\r\n        return response.data\r\n    },\r\n    async createTodolist(title: string) {\r\n        const response = await instance.post<CommonResponseType<{ item: TodolistType }>>(`/todo-lists`, {title})\r\n        return response.data\r\n    },\r\n    async removeTodolist(todolistID: string) {\r\n        const response = await instance.delete<CommonResponseType<{}>>(`/todo-lists/${todolistID}`)\r\n        return response.data\r\n    },\r\n    async renameTodolist(todolistID: string, title: string) {\r\n        const response = await instance.put<CommonResponseType<{}>>(`/todo-lists/${todolistID}`, {title})\r\n        return response.data\r\n    }\r\n}\r\n\r\nexport const taskAPI = {\r\n    async getTasks(todolistID: string) {\r\n        return await instance.get<{ items: TaskType[], error: string, totalCount: number }>(`/todo-lists/${todolistID}/tasks`)\r\n\r\n    },\r\n    async addTask(todolistID: string, title: string) {\r\n        const response = await instance.post<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistID}/tasks`, {title})\r\n        return response.data\r\n    },\r\n    async removeTask(todolistID: string, taskID: string) {\r\n        return await instance.delete<CommonResponseType<{}>>(`/todo-lists/${todolistID}/tasks/${taskID}`)\r\n    },\r\n    async renameTask(todolistID: string, taskID: string, title: string) {\r\n        return await instance.put<CommonResponseType<{ items: TaskType }>>(`/todo-lists/${todolistID}/tasks/${taskID}`, {title})\r\n    },\r\n    async updateTask(todolistID: string, taskID: string, model: Partial<UpdateTaskModelType>) {\r\n        return await instance.put<CommonResponseType<{ items: TaskType }>>(`/todo-lists/${todolistID}/tasks/${taskID}`, model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    async me () {\r\n        const response = await instance.get<CommonResponseType<AuthMeResponseType>>(`/auth/me`)\r\n        return response.data\r\n    },\r\n    async login(data: LoginParamsType) {\r\n        const response = await instance.post<CommonResponseType<{ userId: number }>>(`/auth/login`, data)\r\n        return response.data\r\n    },\r\n    async logout() {\r\n        const response = await instance.delete<CommonResponseType<{}>>(`/auth/login`)\r\n        return response.data\r\n    },\r\n}","export enum resultCodes {\r\n    success,\r\n    error,\r\n    captcha,\r\n}","import {TaskType} from \"../../../api/api\";\r\nimport {RequestStatusType} from \"../ui-reducer/ui-reducer\";\r\n\r\nexport const setTasks = (todolistID: string,tasks:TaskType[]) => {\r\n    return {type: \"SET-TASKS\", todolistID,tasks} as const\r\n}\r\nexport const removeTaskAC = (todolistID: string,taskID: string, ) => {\r\n    return {type: \"REMOVE-TASK\", taskID, todolistID} as const\r\n}\r\nexport const addTaskAC = ( todolistID: string,task:TaskType,title: string,) => {\r\n    return {type: \"ADD-TASK\", title, todolistID,task} as const\r\n}\r\nexport const updateTaskAC = (updateTask: TaskType ) => {\r\n    return {type: \"UPDATE-TASK\", updateTask} as const\r\n}\r\nexport const changeTaskEntityStatusAC = (todolistID: string,taskID:string,entityStatus:RequestStatusType) => {\r\n    return {type: \"CHANGE-TASK-ENTITY-STATUS\", payload: {todolistID,taskID,entityStatus}} as const\r\n}\r\n// export const renameTaskAC = (todolistID: string,taskID: string, title: string) => {\r\n//     return {type: \"CHANGE-TASK-TITLE\", taskID, todolistID, title} as const\r\n// }","import {RequestStatusType} from \"./ui-reducer\";\r\n\r\nexport const setInitializedApp = (initializeStatus: boolean) => {\r\n    return {type: \"UI/SET-INITIALIZED-APP\",initializeStatus} as const\r\n}\r\nexport const setStatusProgress = (progress: number) => {\r\n    return {type: \"UI/SET-PROGRESS\", progress} as const\r\n}\r\nexport const setOperationStatus = (operationStatus: RequestStatusType) => {\r\n    return {type: \"UI/SET-OPERATION-STATUS\",operationStatus} as const\r\n}\r\nexport const setUiError = (error: string|null) => {\r\n    return {type: \"UI/SET-Error\",error} as const\r\n}\r\n","import {setOperationStatus, setUiError} from \"../../redux/reducers/ui-reducer/ui-actions\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AllActionsType} from \"../../redux/store/store\";\r\nimport {CommonResponseType} from \"../../api/api\";\r\n\r\nexport  const handleServerNetworkError = (dispatch:Dispatch<AllActionsType>,message:string) => {\r\n    dispatch(setUiError(message))\r\n    dispatch(setOperationStatus(\"failed\"))\r\n}\r\n\r\nexport  const handleServerAppError = <T> (dispatch:Dispatch<AllActionsType>,response:CommonResponseType<T>) => {\r\n    if (response.messages.length) {\r\n        dispatch(setUiError(response.messages[0]))\r\n    } else {\r\n        dispatch(setUiError('some error'))\r\n    }\r\n    dispatch(setOperationStatus(\"succeeded\"))\r\n}","import {ThunkType} from \"../../store/store\";\r\nimport {taskAPI, TaskStatuses, TaskType} from \"../../../api/api\";\r\nimport {addTaskAC, changeTaskEntityStatusAC, removeTaskAC, setTasks, updateTaskAC} from \"./task-actions\";\r\nimport {TaskReducerActionsTypes} from \"./tasks-actions-types\";\r\nimport {TodolistReducerActionsTypes} from \"../todolist-reducer/todolist-actions-types\";\r\nimport {setOperationStatus} from \"../ui-reducer/ui-actions\";\r\nimport {resultCodes} from \"../../../utils/resultCodes/result-codes\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-util/error-utils\";\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport function tasksReducer(tasks: TaskStateType = {}, action: TaskReducerActionsTypes | TodolistReducerActionsTypes): TaskStateType {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const tasksCopy = {...tasks}\r\n            action.todolists.forEach((tl) => {\r\n                tasksCopy[tl.id] = []\r\n            })\r\n            return tasksCopy;\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: [...action.tasks]\r\n            }\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: tasks[action.todolistID].filter(task => task.id !== action.taskID)\r\n            }\r\n        case \"ADD-TASK\":\r\n            let newTask: TaskType = {...action.task, title: action.title, status: TaskStatuses.New}\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: [newTask, ...tasks[action.todolistID]]\r\n            }\r\n        case \"UPDATE-TASK\":\r\n            return {\r\n                ...tasks,\r\n                [action.updateTask.todoListId!]: tasks[action.updateTask.todoListId!].map(\r\n                    task => task.id === action.updateTask.id ? action.updateTask : task\r\n                )\r\n            }\r\n\r\n        case \"ADD-TODOLIST\"://заюзан ActionCreator из редьюсера тудулиста, для добавления пустого массива тасок\r\n            return {\r\n                ...tasks,\r\n                [action.payload.id]: []\r\n            }\r\n        case \"REMOVE-TODOLIST\"://заюзан ActionCreator из редьюсера тудулиста, для удаления массива тасок\r\n            let copyTasks = {...tasks}\r\n            delete copyTasks[action.id]\r\n            return copyTasks\r\n        case \"CHANGE-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...tasks,\r\n        [action.payload.todolistID]:tasks[action.payload.todolistID].map(\r\n            task => task.id === action.payload.taskID? {...task,entityTaskStatus:action.payload.entityStatus}: task\r\n        )\r\n            }\r\n        default:\r\n            return tasks\r\n    }\r\n}\r\n\r\n//Thunk\r\nexport const getTasks = (todolistID: string): ThunkType => async dispatch => {\r\n    const response = await taskAPI.getTasks(todolistID)\r\n    if (response.data.error === null) {\r\n        dispatch(setTasks(todolistID, response.data.items))\r\n    }\r\n}\r\nexport const addTask = (todolistID: string, title: string): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setOperationStatus(\"loading\"))\r\n        const response = await taskAPI.addTask(todolistID, title)\r\n        if (response.resultCode === resultCodes.success) {\r\n            //dispatch(getTasks(todolistID))\r\n            dispatch(addTaskAC(todolistID, response.data.item, title))\r\n            dispatch(setOperationStatus(\"succeeded\"))\r\n        } else {\r\n            handleServerAppError<{ item: TaskType }>(dispatch,response)\r\n        }\r\n    }\r\n    catch (e:any){\r\n        handleServerNetworkError(dispatch,e.message)\r\n    }\r\n\r\n}\r\nexport const removeTask = (todolistID: string, taskID: string): ThunkType => async dispatch => {\r\n    dispatch(setOperationStatus(\"loading\"))\r\n    dispatch(changeTaskEntityStatusAC(todolistID,taskID,\"loading\"))\r\n    const response = await taskAPI.removeTask(todolistID, taskID)\r\n    if (response.data.resultCode === resultCodes.success) {\r\n        //dispatch(getTasks(todolistID))\r\n        dispatch(removeTaskAC(todolistID, taskID))\r\n        dispatch(setOperationStatus(\"succeeded\"))\r\n    }\r\n}\r\nexport const updateTask = (todolistID: string, taskID: string, change: Partial<TaskType>): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(setOperationStatus(\"loading\"))\r\n        const currentTask = getState().tasks[todolistID].find(t => t.id === taskID) as TaskType\r\n\r\n        const response = await taskAPI.updateTask(todolistID, taskID, {...currentTask, ...change})\r\n        if (response.data.resultCode === resultCodes.success) {\r\n            //dispatch(getTasks(todolistID))\r\n            dispatch(updateTaskAC({...currentTask, ...change}))\r\n            dispatch(setOperationStatus(\"succeeded\"))\r\n        }\r\n    }\r\n","import {TodolistType} from \"../../../api/api\";\r\nimport {FilterValuesType} from \"./todolists-reducer\";\r\nimport {RequestStatusType} from \"../ui-reducer/ui-reducer\";\r\n\r\nexport const setTodolists = (todolists: Array<TodolistType>) => {\r\n    return {type: \"SET-TODOLISTS\", todolists} as const\r\n}\r\nexport const removeTodoListAC = (id: string) => {\r\n    return {type: \"REMOVE-TODOLIST\", id} as const\r\n}\r\nexport const addTodoListAC = (title: string,id:string) => {\r\n    return {type: \"ADD-TODOLIST\", payload: {title, id}} as const\r\n}\r\nexport const renameTodoListAC = (id: string, title: string) => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", payload: {id, title}} as const\r\n}\r\nexport const changeFilterTodoListAC = (filter: FilterValuesType, id: string) => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", payload: {id, filter}} as const\r\n}\r\nexport const changeTodolistEntityStatusAC = (id: string,entityStatus:RequestStatusType) => {\r\n    return {type: \"CHANGE-TODOLIST-ENTITY-STATUS\", payload: {id, entityStatus}} as const\r\n}","import {todolistAPI, TodolistType} from \"../../../api/api\";\r\nimport {ThunkType} from \"../../store/store\";\r\nimport {TodolistReducerActionsTypes} from \"./todolist-actions-types\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodolistEntityStatusAC,\r\n    removeTodoListAC,\r\n    renameTodoListAC,\r\n    setTodolists\r\n} from \"./todolist-actions\";\r\nimport {setInitializedApp, setOperationStatus} from \"../ui-reducer/ui-actions\";\r\nimport {RequestStatusType} from \"../ui-reducer/ui-reducer\";\r\nimport {resultCodes} from \"../../../utils/resultCodes/result-codes\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-util/error-utils\";\r\nimport {getTasks} from \"../task-reducer/tasks-reducer\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\n\r\nexport function todoListsReducer(todoLists: TodolistDomainType[] = [], action: TodolistReducerActionsTypes): TodolistDomainType[] {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all',entityStatus:\"idle\"}))\r\n        case \"REMOVE-TODOLIST\":\r\n            return [...todoLists.filter(t => t.id !== action.id)]\r\n        case \"ADD-TODOLIST\":\r\n            return [{\r\n                ...action.payload,\r\n                addedDate: \"\",\r\n                order: 0,\r\n                filter: \"all\",\r\n                entityStatus:\"idle\"\r\n            },\r\n                ...todoLists,]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return [...todoLists.map(t => t.id === action.payload.id ? {\r\n                ...t,\r\n                title: action.payload.title\r\n            } : t)]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return [...todoLists.map(t => t.id === action.payload.id ? {\r\n                ...t,\r\n                filter: action.payload.filter\r\n            } : t)]\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return [...todoLists.map(t => t.id === action.payload.id ?{\r\n                ...t,\r\n                entityStatus:action.payload.entityStatus\r\n            }:t)]\r\n\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\n//Thunk\r\nexport const getTodolists = (): ThunkType => async dispatch => {\r\n    try {\r\n        const response = await todolistAPI.getTodolists()\r\n        dispatch(setTodolists(response))\r\n        dispatch(setInitializedApp(true))\r\n        response.forEach((ts)=>{\r\n            dispatch(getTasks(ts.id))\r\n        })\r\n    } catch (e:any){\r\n        dispatch(setInitializedApp(true))\r\n        handleServerNetworkError(dispatch,e.message)\r\n    }\r\n\r\n}\r\nexport const CreateTodolist = (title: string): ThunkType => async dispatch => {\r\n    try{\r\n        dispatch(setOperationStatus(\"loading\"))\r\n        const response = await todolistAPI.createTodolist(title)\r\n        if (response.resultCode === resultCodes.success) {\r\n            //dispatch(getTodolists())}\r\n            dispatch(addTodoListAC(title, response.data.item.id))\r\n            dispatch(setOperationStatus(\"succeeded\"))\r\n        } else {\r\n            handleServerAppError<{item:TodolistType}>(dispatch,response)\r\n        }\r\n    }\r\n    catch (e:any) {\r\n        handleServerNetworkError(dispatch,e.message)\r\n    }\r\n\r\n}\r\nexport const removeTodolist = (todolistID: string): ThunkType => async dispatch => {\r\n    dispatch(changeTodolistEntityStatusAC(todolistID,\"loading\"))\r\n    dispatch(setOperationStatus(\"loading\"))\r\n    const response = await todolistAPI.removeTodolist(todolistID)\r\n    if (response.resultCode === resultCodes.success) {\r\n        //dispatch(getTodolists())\r\n        dispatch(removeTodoListAC(todolistID))\r\n        dispatch(setOperationStatus(\"succeeded\"))\r\n    }\r\n}\r\nexport const renameTodolist = (todolistID: string, title: string): ThunkType => async dispatch => {\r\n    dispatch(setOperationStatus(\"loading\"))\r\n    const response = await todolistAPI.renameTodolist(todolistID, title)\r\n    if (response.resultCode === resultCodes.success) {\r\n        //dispatch(getTodolists())\r\n        dispatch(renameTodoListAC(todolistID, title))\r\n        dispatch(setOperationStatus(\"succeeded\"))\r\n    }\r\n}\r\n","type InitialStateType = {\r\n    isDarkTheme: boolean\r\n}\r\ntype ToggleTheme = {\r\n    type:'TOGGLE-THEME'\r\n    isDarkTheme:boolean\r\n}\r\nexport  type ThemeActionsTypes = ToggleTheme\r\n\r\nexport function themeReducer(state:InitialStateType = {isDarkTheme:true}, action: ThemeActionsTypes)  {\r\n    switch (action.type) {\r\n        case 'TOGGLE-THEME': {\r\n            return {\r\n                ...state,\r\n                isDarkTheme:action.isDarkTheme\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const toggleTheme = (isDarkTheme:boolean):ToggleTheme => {\r\n    return {type:\"TOGGLE-THEME\",isDarkTheme}\r\n}\r\n","import {UiReducerActionsTypes} from \"./ui-actions-types\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    initializeStatus: boolean\r\n    operationStatus: RequestStatusType\r\n    progress: number\r\n    error: string | null\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    initializeStatus: false,\r\n    operationStatus: \"idle\",\r\n    progress: 0,\r\n    error: null\r\n}\r\n\r\nexport function uiReducer(state: InitialStateType = initialState, action: UiReducerActionsTypes): InitialStateType {\r\n    switch (action.type) {\r\n        case 'UI/SET-INITIALIZED-APP':\r\n            return {\r\n                ...state,\r\n                initializeStatus: action.initializeStatus\r\n            }\r\n        case 'UI/SET-PROGRESS':\r\n            return {\r\n                ...state,\r\n                progress: action.progress\r\n            }\r\n        case \"UI/SET-OPERATION-STATUS\":\r\n            return {\r\n                ...state,\r\n                operationStatus: action.operationStatus\r\n            }\r\n        case \"UI/SET-Error\":\r\n            return {\r\n                ...state,\r\n                error:action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import {ThunkType} from \"../../store/store\";\r\nimport {AuthReducerActionsTypes} from \"./auth-actions-types\";\r\nimport {setInitializedApp, setOperationStatus, setStatusProgress} from \"../ui-reducer/ui-actions\";\r\nimport {authAPI, LoginParamsType} from \"../../../api/api\";\r\nimport {resultCodes} from \"../../../utils/resultCodes/result-codes\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-util/error-utils\";\r\nimport {createSlice} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n//type InitialStateType = typeof initialState\r\n\r\n\r\n const slice = createSlice({\r\n    name:'auth',\r\n    initialState:initialState,\r\n    reducers:{\r\n        setIsLoggedIn (state, action: AuthReducerActionsTypes) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\nexport const authReducer = slice.reducer\r\nconst {setIsLoggedIn} = slice.actions\r\n// export const authReducer = (state: InitialStateType = initialState, action: AuthReducerActionsTypes): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'login/SET-IS-LOGGED-IN':\r\n//             return {...state, isLoggedIn: action.value}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n\r\n// thunks\r\n\r\nexport const initializeApp = (): ThunkType => async dispatch => {\r\n\r\n    let timer: any\r\n    try {\r\n        let progress = 0\r\n         timer = setInterval(() => {\r\n            if (progress < 100) {\r\n                progress += 10\r\n                dispatch(setStatusProgress(progress))\r\n            } else {\r\n                clearInterval(timer)\r\n                dispatch(setInitializedApp(true))\r\n            }\r\n        }, 100)\r\n        const response = await authAPI.me()\r\n        if (response.resultCode === resultCodes.success) {\r\n            dispatch(setIsLoggedIn({value:true}))\r\n        } else {\r\n            dispatch(setIsLoggedIn({value:false}))\r\n        }\r\n    } catch (e: any) {\r\n\r\n    }\r\n}\r\n\r\nexport const login = (data: LoginParamsType): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setOperationStatus('loading'))\r\n        const response = await authAPI.login(data)\r\n        if (response.resultCode === resultCodes.success) {\r\n            dispatch(setIsLoggedIn({value:true}))\r\n            dispatch(setOperationStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError<{ userId: number }>(dispatch, response)\r\n            dispatch(setOperationStatus('failed'))\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(dispatch, e.message)\r\n        dispatch(setOperationStatus('failed'))\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setOperationStatus('loading'))\r\n        const response = await authAPI.logout()\r\n        if (response.resultCode === resultCodes.success) {\r\n\r\n            dispatch(setIsLoggedIn({value:false}))\r\n            dispatch(setOperationStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError<{}>(dispatch, response)\r\n            dispatch(setOperationStatus('failed'))\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(dispatch, e.message)\r\n        dispatch(setOperationStatus('failed'))\r\n    }\r\n}\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../reducers/task-reducer/tasks-reducer\";\r\nimport {todoListsReducer} from \"../reducers/todolist-reducer/todolists-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {TodolistReducerActionsTypes} from \"../reducers/todolist-reducer/todolist-actions-types\";\r\nimport {TaskReducerActionsTypes} from \"../reducers/task-reducer/tasks-actions-types\";\r\nimport {ThemeActionsTypes, themeReducer} from \"../reducers/theme-reducer/theme-reducer\";\r\nimport {uiReducer} from \"../reducers/ui-reducer/ui-reducer\";\r\nimport {UiReducerActionsTypes} from \"../reducers/ui-reducer/ui-actions-types\";\r\nimport {AuthReducerActionsTypes} from \"../reducers/auth-reducer/auth-actions-types\";\r\nimport {authReducer} from \"../reducers/auth-reducer/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nexport type GlobalStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AllActionsType =\r\n    | TodolistReducerActionsTypes\r\n    | TaskReducerActionsTypes\r\n    | ThemeActionsTypes\r\n    | UiReducerActionsTypes\r\n    | AuthReducerActionsTypes\r\n\r\nexport type ThunkType = ThunkAction<void, GlobalStateType, unknown, AllActionsType>\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    ui:uiReducer,\r\n    theme: themeReducer,\r\n    auth: authReducer,\r\n})\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware:getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {Dispatch} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AllActionsType, GlobalStateType, ThunkType} from \"../../../redux/store/store\";\r\nimport {setUiError} from \"../../../redux/reducers/ui-reducer/ui-actions\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector((state: GlobalStateType) => state.ui.error)\r\n    const dispatch = useDispatch<Dispatch<AllActionsType|ThunkType>>()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setUiError(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {Dispatch} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AllActionsType, GlobalStateType, ThunkType} from \"../../redux/store/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {login} from \"../../redux/reducers/auth-reducer/auth-reducer\";\r\nimport {ErrorSnackbar} from \"../Common/ErrorSnackbar/ErrorSnackbar\";\r\nimport {LoginParamsType} from \"../../api/api\";\r\n\r\n\r\nexport const Login = React.memo(() => {\r\n    const dispatch = useDispatch<Dispatch<AllActionsType | ThunkType>>()\r\n\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'The password cannot be shorter than 3 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(login(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <Grid container\r\n              display={\"flex\"}\r\n              alignItems={\"center\"}\r\n              justifyContent={'center'}\r\n              style={{minHeight: \"100vh\", backgroundColor: isDarkTheme ? \"#484e50\" : \"rgba(96,151,225,0.37)\"}}\r\n        >\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                                <div>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                                <div>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}/>}\r\n                            />\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}\r\n                                disabled={!formik.isValid || !formik.dirty}\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                    <ErrorSnackbar/>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport s from \"./PageNotFound.module.css\"\r\n\r\n\r\nexport const PageNotFound = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <header className={s.topHeader}>\r\n            </header>\r\n            <div>\r\n                <div className={s.starsec}></div>\r\n                <div className={s.starthird}></div>\r\n                <div className={s.starfourth}></div>\r\n                <div className={s.starfifth}></div>\r\n            </div>\r\n\r\n\r\n            <div className={s.lamp__wrap}>\r\n                <div className={s.lamp}>\r\n                    <div className={s.cable}></div>\r\n                    <div className={s.cover}></div>\r\n                    <div className={s.inCover}>\r\n                        <div className={s.bulb}></div>\r\n                    </div>\r\n                    <div className={s.light}></div>\r\n                </div>\r\n            </div>\r\n\r\n            <section className={s.error}>\r\n\r\n                <div className={s.error__content}>\r\n                    <div className={s.error__message}>\r\n                        <h1 className={s.message__title}>Page Not Found</h1>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </section>\r\n\r\n        </div>\r\n    )\r\n}","import {createTheme} from \"@mui/material\";\r\n\r\nexport const lightTheme = createTheme({\r\n    palette: {\r\n        mode: \"light\",\r\n        primary: {\r\n            main: \"#1a72e7\",\r\n        },\r\n        secondary: {\r\n            main: \"#0b2877\",\r\n        },\r\n    },\r\n    typography: {\r\n        button: {\r\n            textTransform: \"none\"\r\n        }\r\n    },\r\n    components: {\r\n        MuiContainer: {\r\n            defaultProps: {\r\n                maxWidth: false,\r\n\r\n            },\r\n        },\r\n        MuiPaper: {\r\n            styleOverrides: {\r\n                elevation8: {\r\n                    position: \"relative\",\r\n                    minHeight: \"500px\",\r\n                    padding: \"18px\",\r\n                }\r\n            }\r\n        },\r\n        MuiListItem: {\r\n            defaultProps: {\r\n                sx: {\r\n                    justifyContent: \"space-between\",\r\n                }\r\n            }\r\n        },\r\n        MuiTypography: {\r\n            defaultProps: {\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                fontWeight: \"bold\",\r\n                variant: \"h6\",\r\n            }\r\n        },\r\n        MuiButton: {\r\n            defaultProps: {\r\n                sx: {\r\n                    color: \"white\",\r\n                    '&:hover': {\r\n                        backgroundColor: \"rgb(11,40,119)\",\r\n                    }\r\n                },\r\n\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nexport const darkTheme = createTheme({\r\n    palette: {\r\n        mode: \"dark\",\r\n        primary: {\r\n            main: \"#594948\",\r\n        },\r\n        secondary: {\r\n            main: \"#333335\",\r\n        },\r\n    },\r\n    typography: {\r\n        button: {\r\n            textTransform: \"none\"\r\n        }\r\n    },\r\n    components: {\r\n\r\n        MuiContainer: {\r\n            defaultProps: {\r\n                maxWidth: false,\r\n            },\r\n        },\r\n        MuiPaper: {\r\n            styleOverrides: {\r\n                elevation8: {\r\n                    position: \"relative\",\r\n                    minHeight: \"500px\",\r\n                    padding: \"18px\",\r\n                }\r\n            }\r\n        },\r\n        MuiListItem: {\r\n            defaultProps: {\r\n                sx: {\r\n                    justifyContent: \"space-between\",\r\n                }\r\n            }\r\n        },\r\n        MuiTypography: {\r\n            defaultProps: {\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                fontWeight: \"bold\",\r\n                variant: \"h6\",\r\n            }\r\n        },\r\n        MuiButton: {\r\n            defaultProps: {\r\n                sx: {\r\n                    color: \"white\",\r\n                    '&:hover': {\r\n                        backgroundColor: \"rgb(62, 51, 50)\",\r\n                    }\r\n                },\r\n\r\n            },\r\n        },\r\n    }\r\n});","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {RequestStatusType} from \"../../../redux/reducers/ui-reducer/ui-reducer\";\r\n\r\n\r\ntype AddItemInputType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n    placeHolder:string\r\n}\r\n\r\nexport const AddItemInput = React.memo(function ({addItem, entityStatus,placeHolder}: AddItemInputType) {\r\n    console.log(\"form\")\r\n    const [newTaskTittle, setNewTaskTittle] = useState(\"\")\r\n    const [error, setError] = useState<string>(\"\")\r\n\r\n    const addItemHandler = useCallback(() => {\r\n        const trimmedTitle = newTaskTittle.trim()\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle)\r\n        } else {\r\n            setError(\"Обязательное поле\")\r\n        }\r\n        setNewTaskTittle(\"\")\r\n    }, [addItem, newTaskTittle])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTittle(e.currentTarget.value);\r\n        setError(\"\")\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler()\r\n        }\r\n    }, [addItemHandler])\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={entityStatus === \"loading\"}\r\n                variant={\"outlined\"}\r\n                label={placeHolder}\r\n                size={\"small\"}\r\n                error={!!error}\r\n                helperText={error}\r\n                value={newTaskTittle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}/>\r\n\r\n            <IconButton\r\n                disabled={entityStatus === \"loading\"}\r\n                size={\"small\"}\r\n                onClick={addItemHandler}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    renameItem: (title: string) => void\r\n    className?: string\r\n}\r\n\r\nexport const EditableSpan = React.memo(\r\n    function ({\r\n                  title,\r\n                  className,\r\n                  renameItem,\r\n              }: EditableSpanType) {\r\n        console.log(\"editable_span\")\r\n        const [editMode, setEditMode] = useState(false)\r\n        const [input, setInput] = useState(\" \") // записываем пустую, но сетаем тайтл реальный в колбэке\r\n\r\n        const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n            setInput(e.currentTarget.value), [setInput])\r\n        const onDoubleClickHandler = useCallback(() => {\r\n            setEditMode(!editMode);\r\n            setInput(title)\r\n        }, [editMode, title])\r\n        const onBlurHandler = useCallback(() => {\r\n            setEditMode(!editMode)\r\n            renameItem(input)\r\n        }, [editMode,input,renameItem])\r\n        const onKeyPressHandler = useCallback( (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(!editMode)\r\n                renameItem(input)\r\n            }\r\n        },[editMode,input,renameItem])\r\n\r\n        return editMode\r\n            ? <TextField\r\n                size={\"small\"}\r\n                value={input}\r\n                onChange={onChangeHandler}\r\n                onBlur={onBlurHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                autoFocus={true}/>\r\n            : <span className={className} onDoubleClick={onDoubleClickHandler}>\r\n            {title}\r\n              </span>\r\n\r\n    })","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../Common/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../api/api\";\r\nimport {Checkbox, IconButton, ListItem} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {RequestStatusType} from \"../../redux/reducers/ui-reducer/ui-reducer\";\r\n\r\n\r\ntype TaskItemType = {\r\n    todoListID: string\r\n    task: TaskType\r\n    entityTaskStatus: RequestStatusType\r\n    removeTask: (todolistID: string, taskID: string) => void\r\n    renameTask: (taskID: string, todolistID: string, newTitle: string) => void\r\n    changeTaskStatus: (todolistID: string, taskID: string, status: TaskStatuses) => void\r\n}\r\n\r\nexport const TaskItem = React.memo(({\r\n                                        task,\r\n                                        removeTask,\r\n                                        renameTask,\r\n                                        entityTaskStatus,\r\n                                        changeTaskStatus,\r\n                                        todoListID,\r\n                                    }: TaskItemType) => {\r\n\r\n        const renameTaskHandler = useCallback((newTitle: string) => {\r\n            renameTask(task.id, todoListID, newTitle)\r\n        }, [task.id, todoListID, renameTask])\r\n\r\n        const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            const isDoneValue = e.currentTarget.checked\r\n            changeTaskStatus(\r\n                todoListID, task.id, isDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n\r\n        }, [task.id, todoListID, changeTaskStatus])\r\n\r\n        const removeTaskHandler = useCallback(() => {\r\n            removeTask(todoListID, task.id)\r\n        }, [task.id, todoListID, removeTask])\r\n\r\n        return (\r\n            <ListItem key={task.id}>\r\n                <div>\r\n                    <Checkbox\r\n                        size={\"small\"}\r\n                        checked={!!task.status}\r\n                        onChange={onChangeStatusHandler}\r\n                    />\r\n                    <EditableSpan\r\n                        renameItem={renameTaskHandler}\r\n                        title={task.title}/>\r\n                </div>\r\n                <IconButton\r\n                    size={\"small\"}\r\n                    disabled={entityTaskStatus === \"loading\"}\r\n                    onClick={removeTaskHandler}\r\n                ><Delete/></IconButton>\r\n            </ListItem>)\r\n    }\r\n)\r\n","import React, {Dispatch, useCallback, useMemo} from \"react\";\r\nimport {AddItemInput} from \"../Common/AddItemInput/AddItemInput\";\r\nimport {EditableSpan} from \"../Common/EditableSpan/EditableSpan\";\r\nimport {FilterValuesType} from \"../../redux/reducers/todolist-reducer/todolists-reducer\";\r\nimport {TaskItem} from \"../TaskItem/TaskItem\";\r\nimport {TaskStatuses, TaskType} from \"../../api/api\";\r\nimport {addTask, removeTask, updateTask} from \"../../redux/reducers/task-reducer/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ThunkType} from \"../../redux/store/store\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Button, ButtonGroup, IconButton, List, Paper, Typography} from \"@mui/material\";\r\nimport {RequestStatusType} from \"../../redux/reducers/ui-reducer/ui-reducer\";\r\n\r\ntype TodolistType = {\r\n    todolistID: string\r\n    entityStatus: RequestStatusType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTodolist: (todoListID: string) => void\r\n    renameTodolist: (todoListID: string, newTitle: string) => void\r\n    changeTaskFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    filterTdl: FilterValuesType\r\n}\r\n\r\n\r\nconst Todolist = React.memo(function ({\r\n                                          todolistID,\r\n                                          entityStatus,\r\n                                          title,\r\n                                          tasks,\r\n                                          removeTodolist,\r\n                                          renameTodolist,\r\n                                          changeTaskFilter,\r\n                                          filterTdl,\r\n                                      }: TodolistType) {\r\n    //const dispatch = useDispatch<Dispatch<AllActionsType>>()\r\n    const dispatchThunk = useDispatch<Dispatch<ThunkType>>()\r\n\r\n    const removeTaskHandler = useCallback((todolistID: string, taskID: string) => {\r\n        dispatchThunk(removeTask(todolistID, taskID))\r\n    }, [dispatchThunk])\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        dispatchThunk(addTask(todolistID, title))\r\n    }, [dispatchThunk, todolistID])\r\n\r\n    const renameTaskHandler = useCallback((taskID: string, todolistID: string, title: string) => {\r\n        dispatchThunk(updateTask(todolistID, taskID, {title}))\r\n    }, [dispatchThunk])\r\n\r\n    const changeTaskStatusHandler = useCallback((todolistID: string, taskID: string, status: TaskStatuses) => {\r\n        dispatchThunk(updateTask(todolistID, taskID, {status}))\r\n    }, [dispatchThunk])\r\n\r\n\r\n    const renameTodoList = useCallback((newTitle: string) => {\r\n        renameTodolist(todolistID, newTitle)\r\n    }, [renameTodolist, todolistID])\r\n\r\n    let tasksForRender = tasks\r\n    if (filterTdl === \"active\") {\r\n        tasksForRender = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filterTdl === \"completed\") {\r\n        tasksForRender = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    //мапится массив тасок\r\n    const tasksJSX = useMemo(() => tasksForRender.map(t => {\r\n            console.log(`${t.title} + ${t.id} ` )\r\n                return (\r\n                    <Paper key={t.id} style={{margin: \"5px 5px\"}}>\r\n                        <TaskItem\r\n                            entityTaskStatus={t.entityTaskStatus!}\r\n                            key={t.id}\r\n                            removeTask={removeTaskHandler}\r\n                            renameTask={renameTaskHandler}\r\n                            changeTaskStatus={changeTaskStatusHandler}\r\n                            task={t}\r\n                            todoListID={todolistID}\r\n                        />\r\n                    </Paper>\r\n                )\r\n            }\r\n        ),[changeTaskStatusHandler, removeTaskHandler, renameTaskHandler, tasksForRender,todolistID])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n            changeTaskFilter(\"all\", todolistID)\r\n        },\r\n        [changeTaskFilter, todolistID])\r\n    const onActiveClickHandler = useCallback(() => {\r\n            changeTaskFilter(\"active\", todolistID)\r\n        },\r\n        [changeTaskFilter, todolistID])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n            changeTaskFilter(\"completed\", todolistID)\r\n        },\r\n        [changeTaskFilter, todolistID])\r\n\r\n    const buttonStatusClass = useCallback( (filter: FilterValuesType) =>\r\n        filter === filterTdl ? \"secondary\" : \"primary\" //меняет класс кнопкам в зависимости от фильтрации в аpp.tsx\r\n    ,[filterTdl])\r\n\r\n\r\n    return (\r\n            <div>\r\n                <Typography>\r\n                    <EditableSpan title={title} renameItem={renameTodoList}/>\r\n                </Typography>\r\n                <div>\r\n                    <AddItemInput\r\n                        placeHolder={\"New task\"}\r\n                        addItem={addTaskHandler}\r\n                        entityStatus={entityStatus}\r\n                    />\r\n                </div>\r\n                <List>\r\n                    {tasksJSX}\r\n                </List>\r\n                <div style={{display:\"flex\", justifyContent:\"space-between\",bottom: \"15px\", position: \"absolute\"}}>\r\n                    <ButtonGroup size={\"small\"} variant={\"contained\"}>\r\n                        <Button onClick={onAllClickHandler} color={buttonStatusClass(\"all\")}>\r\n                            All\r\n                        </Button>\r\n                        <Button onClick={onActiveClickHandler} color={buttonStatusClass(\"active\")}>\r\n                            Active\r\n                        </Button>\r\n                        <Button onClick={onCompletedClickHandler} color={buttonStatusClass(\"completed\")}>\r\n                            Completed\r\n                        </Button>\r\n\r\n                    </ButtonGroup>\r\n                    <IconButton\r\n                        disabled={entityStatus === \"loading\"}\r\n                        size={\"small\"}\r\n                        onClick={() => {\r\n                            removeTodolist(todolistID)\r\n                        }}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n    )\r\n})\r\n\r\nexport default Todolist\r\n\r\n\r\n","import IconButton from \"@mui/material/IconButton\";\r\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\r\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\r\nimport React from \"react\";\r\n\r\ntype ToggleThemeType = {\r\n    onClickHandler: () => void\r\n    isDarkTheme: boolean\r\n}\r\n\r\nexport const ToggleTheme: React.FC<ToggleThemeType> = ({onClickHandler,isDarkTheme}) => {\r\n\r\n\r\n    return (\r\n        <IconButton\r\n            onClick={onClickHandler}\r\n            color=\"inherit\"\r\n        >\r\n            {isDarkTheme ? (\r\n                <Brightness7Icon/>\r\n            ) : (\r\n                <Brightness4Icon/>\r\n            )}\r\n        </IconButton>\r\n    )\r\n}","import AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Menu from \"@mui/icons-material/Menu\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {AddItemInput} from \"../Common/AddItemInput/AddItemInput\";\r\nimport {ErrorSnackbar} from \"../Common/ErrorSnackbar/ErrorSnackbar\";\r\nimport React, {Dispatch, useCallback, useEffect, useMemo} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AllActionsType, GlobalStateType, ThunkType} from \"../../redux/store/store\";\r\nimport {toggleTheme} from \"../../redux/reducers/theme-reducer/theme-reducer\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Todolist from \"../Todolist/Todolist\";\r\nimport {\r\n    CreateTodolist,\r\n    FilterValuesType,\r\n    getTodolists,\r\n    removeTodolist,\r\n    renameTodolist\r\n} from \"../../redux/reducers/todolist-reducer/todolists-reducer\";\r\nimport {changeFilterTodoListAC} from \"../../redux/reducers/todolist-reducer/todolist-actions\";\r\nimport {ToggleTheme} from \"../Common/ToggleTheme/ToggleTheme\";\r\nimport {logout} from \"../../redux/reducers/auth-reducer/auth-reducer\";\r\n\r\n\r\nexport const Main = React.memo( () => {\r\n    const dispatch = useDispatch<Dispatch<AllActionsType | ThunkType>>()\r\n\r\n    const isLoggedIn = useSelector((state: GlobalStateType) => state.auth.isLoggedIn)\r\n\r\n    const operationStatus = useSelector((state: GlobalStateType) => state.ui.operationStatus)\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n    const todoLists = useSelector((state: GlobalStateType) => state.todoLists)\r\n    const tasks = useSelector((state: GlobalStateType) => state.tasks)\r\n\r\n\r\n    const toggleThemeHandler = useCallback (() => {\r\n        dispatch(toggleTheme(!isDarkTheme))\r\n    },[dispatch,isDarkTheme])\r\n    const logoutHandler = useCallback (() => {\r\n        dispatch(logout())\r\n    },[dispatch])\r\n\r\n\r\n    const changeTaskFilter = useCallback((filter: FilterValuesType, todolistID: string) => {\r\n        dispatch(changeFilterTodoListAC(filter, todolistID))\r\n    }, [dispatch])\r\n    //\r\n    //\r\n    //TODOLIST\r\n    const addTodoListHandler = useCallback(function (title: string) {\r\n        dispatch(CreateTodolist(title))\r\n    }, [dispatch])\r\n\r\n    const removeTodoListHandler = useCallback((todolistID: string) => {\r\n        dispatch(removeTodolist(todolistID))\r\n    }, [dispatch])\r\n\r\n    const renameTodolistHandler = useCallback((todolistID: string, newTitle: string) => {\r\n        dispatch(renameTodolist(todolistID, newTitle))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolists())\r\n    }, [dispatch])\r\n\r\n\r\n    const todoListRender = useMemo( ()=> {\r\n       return  todoLists.map((tdl) => {\r\n                console.log(`ListName: ${tdl.title}`)\r\n                let tasksForRender = tasks[tdl.id]\r\n                return (\r\n                    <Grid item key={tdl.id}>\r\n                        <Paper elevation={8}>\r\n                            <Todolist\r\n                                entityStatus={tdl.entityStatus}\r\n                                key={tdl.id}\r\n                                todolistID={tdl.id}\r\n                                title={tdl.title}\r\n                                tasks={tasksForRender}\r\n                                removeTodolist={removeTodoListHandler}\r\n                                renameTodolist={renameTodolistHandler}\r\n                                changeTaskFilter={changeTaskFilter}\r\n                                filterTdl={tdl.filter}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>)\r\n            }\r\n        )\r\n    },[todoLists,tasks])\r\n\r\n    return (\r\n        <div style={{minHeight: \"100vh\", backgroundColor: isDarkTheme ? \"#484e50\" : \"rgba(96,151,225,0.37)\"}}>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar sx={{justifyContent: 'space-between'}}>\r\n                    <Box>\r\n                        <IconButton>\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <ToggleTheme onClickHandler={toggleThemeHandler} isDarkTheme={isDarkTheme}/>\r\n                    </Box>\r\n                    <Typography>\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                <div style={{height: \"5px\"}}>\r\n                    {operationStatus === 'loading' && <LinearProgress/>}\r\n                </div>\r\n            </AppBar>\r\n                <Container>\r\n                    <Grid container style={{padding: \"20px 0 20px 0\"}}>\r\n                        <AddItemInput placeHolder={\"New todo\"} addItem={addTodoListHandler}/>\r\n                    </Grid>\r\n                    <Grid container spacing={2}>\r\n                        {todoListRender}\r\n                    </Grid>\r\n                </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n   )\r\n})","import React from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport CircularProgress, {CircularProgressProps} from '@mui/material/CircularProgress';\r\nimport {useSelector} from \"react-redux\";\r\nimport {GlobalStateType} from \"../../../redux/store/store\";\r\n\r\nexport function CircularProgressWithLabel(props: CircularProgressProps & { value: number }) {\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n    return (\r\n        <Box style={{minHeight: \"100vh\", backgroundColor: isDarkTheme ? \"#484e50\" : \"rgba(96,151,225,0.37)\"}}\r\n            sx={{\r\n            top: 0,\r\n            left: 0,\r\n            bottom: 0,\r\n            right: 0,\r\n            position: 'absolute',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        }}>\r\n            <CircularProgress variant=\"determinate\" {...props} />\r\n            <Box sx={{\r\n                top: 0,\r\n                left: 0,\r\n                bottom: 0,\r\n                right: 0,\r\n                position: 'absolute',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n            }}>\r\n                <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\r\n                    {`${Math.round(props.value)}%`}\r\n                </Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}","import React, {Dispatch, useCallback, useEffect, useLayoutEffect} from 'react';\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AllActionsType, GlobalStateType, ThunkType} from \"./redux/store/store\";\r\nimport ThemeProvider from \"@mui/material/styles/ThemeProvider\";\r\nimport {darkTheme, lightTheme} from \"./themes/themes\";\r\nimport {Main} from \"./Components/Main/Main\";\r\nimport {Login} from \"./Components/Login/Login\";\r\nimport {toggleTheme} from \"./redux/reducers/theme-reducer/theme-reducer\";\r\nimport {initializeApp} from \"./redux/reducers/auth-reducer/auth-reducer\";\r\nimport {CircularProgressWithLabel} from \"./Components/Common/CircularProgress/CircularProgress\";\r\n\r\n\r\nconst App = React.memo(function () {\r\n    console.log(\"app\")\r\n\r\n    const dispatch = useDispatch<Dispatch<AllActionsType | ThunkType>>()\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n\r\n    const isLoggedIn = useSelector((state: GlobalStateType) => state.auth.isLoggedIn)\r\n    const initializeStatus = useSelector((state: GlobalStateType) => state.ui.initializeStatus)\r\n    const progress = useSelector((state: GlobalStateType) => state.ui.progress)\r\n\r\n    const setLocalStorageThemeHandler = useCallback((isDarkTheme: boolean) => {\r\n        localStorage.setItem(\"isDarkTheme\", JSON.stringify(isDarkTheme))\r\n    }, [])\r\n    const getLocalStorageThemeHandler = useCallback(() => {\r\n        let localTheme = localStorage.getItem(\"isDarkTheme\")\r\n        localTheme === null\r\n            ? dispatch(toggleTheme(true))\r\n            : dispatch(toggleTheme(localTheme && JSON.parse(localTheme)))\r\n    }, [dispatch])\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        getLocalStorageThemeHandler()\r\n    }, [getLocalStorageThemeHandler])\r\n    useEffect(() => {\r\n        setLocalStorageThemeHandler(isDarkTheme)\r\n    }, [setLocalStorageThemeHandler, isDarkTheme])\r\n    useLayoutEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [dispatch])\r\n\r\n    if (!initializeStatus) {\r\n        return (\r\n            <ThemeProvider theme={isDarkTheme ? darkTheme : lightTheme}>\r\n                <CircularProgressWithLabel value={progress}/> )\r\n            </ThemeProvider> )\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={isDarkTheme ? darkTheme : lightTheme}>\r\n            <>\r\n                {initializeStatus && isLoggedIn\r\n                    ? <Main/>\r\n                    : <Login/>}\r\n            </>\r\n        </ThemeProvider>\r\n    )\r\n})\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store/store\";\r\nimport {BrowserRouter, HashRouter, Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from \"./Components/Login/Login\";\r\nimport {PageNotFound} from \"./Components/Utils/PageNotFound/PageNotFound\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <Routes>\r\n                <Route path={\"/todolist\"} element={<App/>}/>\r\n                <Route path={\"/\"} element={<App/>}/>\r\n                <Route path={\"/login\"} element={<Login/>}/>\r\n                <Route path={\"/404\"} element={<PageNotFound/>} />\r\n                <Route path={\"/*\"} element={<Navigate to={\"/404\"}/>}/>\r\n            </Routes>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PageNotFound_container__3efEN\",\"top-header\":\"PageNotFound_top-header__3NLKY\",\"starsec\":\"PageNotFound_starsec__KncD1\",\"animStar\":\"PageNotFound_animStar__1r_3c\",\"starthird\":\"PageNotFound_starthird__2DHsx\",\"starfourth\":\"PageNotFound_starfourth__-rx57\",\"starfifth\":\"PageNotFound_starfifth__3Wyqf\",\"clearfix\":\"PageNotFound_clearfix__Tly39\",\"error\":\"PageNotFound_error__2v0xe\",\"error__overlay\":\"PageNotFound_error__overlay__2dc1o\",\"error__content\":\"PageNotFound_error__content__1UNla\",\"error__message\":\"PageNotFound_error__message__3jOit\",\"message__title\":\"PageNotFound_message__title__dxGiq\",\"message__text\":\"PageNotFound_message__text__24yB-\",\"error__nav\":\"PageNotFound_error__nav__2CnMy\",\"e-nav__form\":\"PageNotFound_e-nav__form__3NFi8\",\"e-nav__icon\":\"PageNotFound_e-nav__icon__27Qo6\",\"e-nav__link\":\"PageNotFound_e-nav__link__14YJa\",\"error__social\":\"PageNotFound_error__social__21VI_\",\"e-social__list\":\"PageNotFound_e-social__list__3PGXg\",\"e-social__icon\":\"PageNotFound_e-social__icon__1Ad_H\",\"e-social__link\":\"PageNotFound_e-social__link__1b7xc\",\"lamp\":\"PageNotFound_lamp__1hgQI\",\"move\":\"PageNotFound_move__1tAKe\",\"cable\":\"PageNotFound_cable__3-duC\",\"cover\":\"PageNotFound_cover__3U5Bs\",\"in-cover\":\"PageNotFound_in-cover__3tGeO\",\"bulb\":\"PageNotFound_bulb__3bej9\",\"light\":\"PageNotFound_light__394e1\",\"lamp__wrap\":\"PageNotFound_lamp__wrap__3LAbP\"};"],"sourceRoot":""}