{"version":3,"sources":["serviceWorker.ts","api/api.ts","definitions/result-codes.ts","redux/reducers/task-reducer/task-actions.ts","redux/reducers/ui-reducer/ui-actions.ts","utils/errorUtils.ts","redux/reducers/task-reducer/tasks-reducer.ts","redux/reducers/todolist-reducer/todolist-actions.ts","redux/reducers/todolist-reducer/todolists-reducer.ts","redux/reducers/theme-reducer/theme-reducer.ts","redux/reducers/ui-reducer/ui-reducer.ts","redux/reducers/auth-reducer/auth-reducer.ts","redux/store/store.ts","Components/common/ErrorSnackbar/ErrorSnackbar.tsx","Components/login/Login.tsx","Components/utils/PageNotFound/PageNotFound.tsx","themes/themes.ts","Components/common/AddItemInput/AddItemInput.tsx","Components/common/EditableSpan/EditableSpan.tsx","Components/taskItem/TaskItem.tsx","hooks/useTaskCRUD.ts","Components/todolist/Todolist.tsx","hooks/useTasksFilter.ts","utils/tasksForRender.ts","Components/common/ToggleTheme/ToggleTheme.tsx","Components/main/Main.tsx","Components/common/CircularProgress/CircularProgress.tsx","App.tsx","index.tsx","Components/utils/PageNotFound/PageNotFound.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","resultCodes","todolistAPI","get","response","data","title","post","todolistID","delete","put","taskAPI","taskID","model","authAPI","setTasks","tasks","type","removeTaskAC","addTaskAC","task","updateTaskAC","updateTask","changeTaskEntityStatusAC","entityStatus","payload","setInitializedApp","initializeStatus","setStatusProgress","progress","setOperationStatus","operationStatus","setUiError","error","handleServerNetworkError","dispatch","message","handleServerAppError","messages","length","change","getState","a","currentTask","find","t","id","resultCode","success","removeTodoListAC","addTodoListAC","renameTodoListAC","changeFilterTodoListAC","filter","toggleTheme","isDarkTheme","initialState","slice","createSlice","name","isLoggedIn","reducers","setIsLoggedIn","state","action","value","authReducer","reducer","actions","rootReducer","combineReducers","todoLists","todolists","map","tl","addedDate","order","tasksCopy","forEach","newTask","status","New","todoListId","copyTasks","entityTaskStatus","ui","theme","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useSelector","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","memo","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","Grid","container","display","alignItems","justifyContent","style","minHeight","backgroundColor","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","FormControlLabel","control","Checkbox","Button","color","disabled","isValid","dirty","PageNotFound","className","s","topHeader","starsec","starthird","starfourth","starfifth","lamp__wrap","lamp","cable","cover","inCover","bulb","light","error__content","error__message","message__title","lightTheme","createTheme","palette","mode","primary","main","secondary","typography","button","textTransform","components","MuiContainer","defaultProps","maxWidth","MuiPaper","styleOverrides","elevation8","position","padding","elevation1","MuiButton","darkTheme","MuiListItem","AddItemInput","addItem","placeHolder","console","log","useState","newTaskTittle","setNewTaskTittle","setError","addItemHandler","useCallback","trimmedTitle","trim","onChangeHandler","e","currentTarget","onKeyPressHandler","key","size","helperText","onChange","onKeyPress","IconButton","onClick","AddBoxOutlined","EditableSpan","renameItem","editMode","setEditMode","input","setInput","onDoubleClickHandler","onBlurHandler","onBlur","autoFocus","Typography","onDoubleClick","align","noWrap","component","TaskItem","removeTask","renameTask","changeTaskStatus","todoListID","renameTaskHandler","newTitle","onChangeStatusHandler","isDoneValue","checked","Completed","removeTaskHandler","ListItem","Delete","useTaskCRUD","handleTaskRemove","handleTaskAdd","addTask","handleTaskRename","handleTaskStatusChange","useMemo","Todolist","removeTodolist","renameTodolist","filterTdl","handleFilterAllClick","handleFilterActiveClick","handleFilterCompletedClick","useTasksFilter","renameTodoList","tasksJSX","tasksForRender","Paper","buttonStatusClass","Box","marginBottom","List","bottom","ButtonGroup","marginLeft","ToggleTheme","onClickHandler","Main","toggleThemeHandler","logoutHandler","addTodoListHandler","CreateTodolist","removeTodoListHandler","renameTodolistHandler","useEffect","ts","items","todoListRender","tdl","AppBar","Toolbar","Logout","height","LinearProgress","Container","spacing","CircularProgressWithLabel","top","left","right","CircularProgress","Math","round","App","setLocalStorageThemeHandler","localStorage","setItem","JSON","stringify","getLocalStorageThemeHandler","localTheme","getItem","parse","useLayoutEffect","timer","setInterval","clearInterval","ThemeProvider","ReactDOM","render","path","element","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.5f0c585a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport {RequestStatusType} from \"../redux/reducers/ui-reducer/ui-reducer\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    // headers: {\r\n    //     \"API-KEY\": \"b701020f-78a1-4daa-8002-6ee349adc8a0\"\r\n    // }\r\n})\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgently,\r\n    Later,\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description?: string\r\n    todoListId?: string\r\n    order?: number\r\n    status: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n    addedDate?: string\r\n    entityTaskStatus?:RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeResponseType = {\r\n    id:number\r\n    email: string\r\n    login:string\r\n}\r\nexport type CommonResponseType<T> = {\r\n    data: T\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: 0 | 1\r\n}\r\n\r\n\r\nexport const todolistAPI = {\r\n    async getTodolists() {\r\n        const response = await instance.get<TodolistType[]>(`/todo-lists`)\r\n        return response.data\r\n    },\r\n    async createTodolist(title: string) {\r\n        const response = await instance.post<CommonResponseType<{ item: TodolistType }>>(`/todo-lists`, {title})\r\n        return response.data\r\n    },\r\n    async removeTodolist(todolistID: string) {\r\n        const response = await instance.delete<CommonResponseType<{}>>(`/todo-lists/${todolistID}`)\r\n        return response.data\r\n    },\r\n    async renameTodolist(todolistID: string, title: string) {\r\n        const response = await instance.put<CommonResponseType<{}>>(`/todo-lists/${todolistID}`, {title})\r\n        return response.data\r\n    }\r\n}\r\n\r\nexport const taskAPI = {\r\n    async getTasks(todolistID: string) {\r\n        return await instance.get<{ items: TaskType[], error: string, totalCount: number }>(`/todo-lists/${todolistID}/tasks`)\r\n\r\n    },\r\n    async addTask(todolistID: string, title: string) {\r\n        const response = await instance.post<CommonResponseType<{ item: TaskType }>>(`/todo-lists/${todolistID}/tasks`, {title})\r\n        return response.data\r\n    },\r\n    async removeTask(todolistID: string, taskID: string) {\r\n        return await instance.delete<CommonResponseType<{}>>(`/todo-lists/${todolistID}/tasks/${taskID}`)\r\n    },\r\n    async renameTask(todolistID: string, taskID: string, title: string) {\r\n        return await instance.put<CommonResponseType<{ items: TaskType }>>(`/todo-lists/${todolistID}/tasks/${taskID}`, {title})\r\n    },\r\n    async updateTask(todolistID: string, taskID: string, model: Partial<UpdateTaskModelType>) {\r\n        return await instance.put<CommonResponseType<{ items: TaskType }>>(`/todo-lists/${todolistID}/tasks/${taskID}`, model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    async me () {\r\n        const response = await instance.get<CommonResponseType<AuthMeResponseType>>(`/auth/me`)\r\n        return response.data\r\n    },\r\n    async login(data: LoginParamsType) {\r\n        const response = await instance.post<CommonResponseType<{ userId: number }>>(`/auth/login`, data)\r\n        return response.data\r\n    },\r\n    async logout() {\r\n        const response = await instance.delete<CommonResponseType<{}>>(`/auth/login`)\r\n        return response.data\r\n    },\r\n}","export enum resultCodes {\r\n    success,\r\n    error,\r\n    captcha,\r\n}","import {TaskType} from \"../../../api/api\";\r\nimport {RequestStatusType} from \"../ui-reducer/ui-reducer\";\r\n\r\nexport const setTasks = (todolistID: string,tasks:TaskType[]) => {\r\n    return {type: \"SET-TASKS\", todolistID,tasks} as const\r\n}\r\nexport const removeTaskAC = (todolistID: string,taskID: string, ) => {\r\n    return {type: \"REMOVE-TASK\", taskID, todolistID} as const\r\n}\r\nexport const addTaskAC = ( todolistID: string,task:TaskType,title: string,) => {\r\n    return {type: \"ADD-TASK\", title, todolistID,task} as const\r\n}\r\nexport const updateTaskAC = (updateTask: TaskType ) => {\r\n    return {type: \"UPDATE-TASK\", updateTask} as const\r\n}\r\nexport const changeTaskEntityStatusAC = (todolistID: string,taskID:string,entityStatus:RequestStatusType) => {\r\n    return {type: \"CHANGE-TASK-ENTITY-STATUS\", payload: {todolistID,taskID,entityStatus}} as const\r\n}\r\n// export const renameTaskAC = (todolistID: string,taskID: string, title: string) => {\r\n//     return {type: \"CHANGE-TASK-TITLE\", taskID, todolistID, title} as const\r\n// }","import {RequestStatusType} from \"./ui-reducer\";\r\n\r\nexport const setInitializedApp = (initializeStatus: boolean) => {\r\n    return {type: \"UI/SET-INITIALIZED-APP\",initializeStatus} as const\r\n}\r\nexport const setStatusProgress = (progress: number) => {\r\n    return {type: \"UI/SET-PROGRESS\", progress} as const\r\n}\r\nexport const setOperationStatus = (operationStatus: RequestStatusType) => {\r\n    return {type: \"UI/SET-OPERATION-STATUS\",operationStatus} as const\r\n}\r\nexport const setUiError = (error: string|null) => {\r\n    return {type: \"UI/SET-Error\",error} as const\r\n}\r\n","import {setOperationStatus, setUiError} from \"../redux/reducers/ui-reducer/ui-actions\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AllActionsType} from \"../redux/store/store\";\r\nimport {CommonResponseType} from \"../api/api\";\r\n\r\nexport  const handleServerNetworkError = (dispatch:Dispatch<AllActionsType>,message:string) => {\r\n    dispatch(setUiError(message))\r\n    dispatch(setOperationStatus(\"failed\"))\r\n}\r\n\r\nexport  const handleServerAppError = <T> (dispatch:Dispatch<AllActionsType>,response:CommonResponseType<T>) => {\r\n    if (response.messages.length) {\r\n        dispatch(setUiError(response.messages[0]))\r\n    } else {\r\n        dispatch(setUiError('some error'))\r\n    }\r\n    dispatch(setOperationStatus(\"succeeded\"))\r\n}","import {ThunkType} from \"../../store/store\";\r\nimport {taskAPI, TaskStatuses, TaskType} from \"../../../api/api\";\r\nimport {addTaskAC, changeTaskEntityStatusAC, removeTaskAC, setTasks, updateTaskAC} from \"./task-actions\";\r\nimport {TaskReducerActionsTypes} from \"./tasks-actions-types\";\r\nimport {TodolistReducerActionsTypes} from \"../todolist-reducer/todolist-actions-types\";\r\nimport {setOperationStatus} from \"../ui-reducer/ui-actions\";\r\nimport {resultCodes} from \"../../../definitions/result-codes\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport function tasksReducer(tasks: TaskStateType = {}, action: TaskReducerActionsTypes | TodolistReducerActionsTypes): TaskStateType {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const tasksCopy = {...tasks}\r\n            action.todolists.forEach((tl) => {\r\n                tasksCopy[tl.id] = []\r\n            })\r\n            return tasksCopy;\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: [...action.tasks]\r\n            }\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: tasks[action.todolistID].filter(task => task.id !== action.taskID)\r\n            }\r\n        case \"ADD-TASK\":\r\n            let newTask: TaskType = {...action.task, title: action.title, status: TaskStatuses.New}\r\n            return {\r\n                ...tasks,\r\n                [action.todolistID]: [newTask, ...tasks[action.todolistID]]\r\n            }\r\n        case \"UPDATE-TASK\":\r\n            return {\r\n                ...tasks,\r\n                [action.updateTask.todoListId!]: tasks[action.updateTask.todoListId!].map(\r\n                    task => task.id === action.updateTask.id ? action.updateTask : task\r\n                )\r\n            }\r\n\r\n        case \"ADD-TODOLIST\"://заюзан ActionCreator из редьюсера тудулиста, для добавления пустого массива тасок\r\n            return {\r\n                ...tasks,\r\n                [action.payload.id]: []\r\n            }\r\n        case \"REMOVE-TODOLIST\"://заюзан ActionCreator из редьюсера тудулиста, для удаления массива тасок\r\n            let copyTasks = {...tasks}\r\n            delete copyTasks[action.id]\r\n            return copyTasks\r\n        case \"CHANGE-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...tasks,\r\n                [action.payload.todolistID]: tasks[action.payload.todolistID].map(\r\n                    task => task.id === action.payload.taskID ? {\r\n                        ...task,\r\n                        entityTaskStatus: action.payload.entityStatus\r\n                    } : task\r\n                )\r\n            }\r\n        default:\r\n            return tasks\r\n    }\r\n}\r\n\r\n//Thunk\r\nexport const getTasks = (todolistID: string): ThunkType => async dispatch => {\r\n    const response = await taskAPI.getTasks(todolistID)\r\n    if (response.data.error === null) {\r\n        dispatch(setTasks(todolistID, response.data.items))\r\n    }\r\n}\r\nexport const addTask = (todolistID: string, title: string): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setOperationStatus(\"loading\"))\r\n        const response = await taskAPI.addTask(todolistID, title)\r\n        if (response.resultCode === resultCodes.success) {\r\n            //dispatch(getTasks(todolistID))\r\n            dispatch(addTaskAC(todolistID, response.data.item, title))\r\n            dispatch(setOperationStatus(\"succeeded\"))\r\n        } else {\r\n            handleServerAppError<{ item: TaskType }>(dispatch, response)\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(dispatch, e.message)\r\n    }\r\n\r\n}\r\nexport const removeTask = (todolistID: string, taskID: string): ThunkType => async dispatch => {\r\n    dispatch(setOperationStatus(\"loading\"))\r\n    dispatch(changeTaskEntityStatusAC(todolistID, taskID, \"loading\"))\r\n    const response = await taskAPI.removeTask(todolistID, taskID)\r\n    if (response.data.resultCode === resultCodes.success) {\r\n        //dispatch(getTasks(todolistID))\r\n        dispatch(removeTaskAC(todolistID, taskID))\r\n        dispatch(setOperationStatus(\"succeeded\"))\r\n    }\r\n}\r\nexport const updateTask = (todolistID: string, taskID: string, change: Partial<TaskType>): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        dispatch(setOperationStatus(\"loading\"))\r\n        const currentTask = getState().tasks[todolistID].find(t => t.id === taskID) as TaskType\r\n        try {\r\n            const response = await taskAPI.updateTask(todolistID, taskID, {...currentTask, ...change})\r\n            if (response.data.resultCode === resultCodes.success) {\r\n                dispatch(updateTaskAC({...currentTask, ...change}))\r\n                dispatch(setOperationStatus(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError<{ items: TaskType }>(dispatch, response.data)\r\n            }\r\n        }\r\n        catch (e:any){\r\n            handleServerNetworkError(dispatch,e.message)\r\n        }\r\n    }\r\n\r\n","import {TodolistType} from \"../../../api/api\";\r\nimport {FilterValuesType} from \"./todolists-reducer\";\r\nimport {RequestStatusType} from \"../ui-reducer/ui-reducer\";\r\n\r\nexport const setTodolists = (todolists: Array<TodolistType>) => {\r\n    return {type: \"SET-TODOLISTS\", todolists} as const\r\n}\r\nexport const removeTodoListAC = (id: string) => {\r\n    return {type: \"REMOVE-TODOLIST\", id} as const\r\n}\r\nexport const addTodoListAC = (title: string,id:string) => {\r\n    return {type: \"ADD-TODOLIST\", payload: {title, id}} as const\r\n}\r\nexport const renameTodoListAC = (id: string, title: string) => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", payload: {id, title}} as const\r\n}\r\nexport const changeFilterTodoListAC = (filter: FilterValuesType, id: string) => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", payload: {id, filter}} as const\r\n}\r\nexport const changeTodolistEntityStatusAC = (id: string,entityStatus:RequestStatusType) => {\r\n    return {type: \"CHANGE-TODOLIST-ENTITY-STATUS\", payload: {id, entityStatus}} as const\r\n}","import {todolistAPI, TodolistType} from \"../../../api/api\";\r\nimport {ThunkType} from \"../../store/store\";\r\nimport {TodolistReducerActionsTypes} from \"./todolist-actions-types\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodolistEntityStatusAC,\r\n    removeTodoListAC,\r\n    renameTodoListAC,\r\n    setTodolists\r\n} from \"./todolist-actions\";\r\nimport {setInitializedApp, setOperationStatus} from \"../ui-reducer/ui-actions\";\r\nimport {RequestStatusType} from \"../ui-reducer/ui-reducer\";\r\nimport {resultCodes} from \"../../../definitions/result-codes\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {getTasks} from \"../task-reducer/tasks-reducer\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\n\r\nexport function todoListsReducer(todoLists: TodolistDomainType[] = [], action: TodolistReducerActionsTypes): TodolistDomainType[] {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all',entityStatus:\"idle\"}))\r\n        case \"REMOVE-TODOLIST\":\r\n            return [...todoLists.filter(t => t.id !== action.id)]\r\n        case \"ADD-TODOLIST\":\r\n            return [{\r\n                ...action.payload,\r\n                addedDate: \"\",\r\n                order: 0,\r\n                filter: \"all\",\r\n                entityStatus:\"idle\"\r\n            },\r\n                ...todoLists,]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return [...todoLists.map(t => t.id === action.payload.id ? {\r\n                ...t,\r\n                title: action.payload.title\r\n            } : t)]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return [...todoLists.map(t => t.id === action.payload.id ? {\r\n                ...t,\r\n                filter: action.payload.filter\r\n            } : t)]\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return [...todoLists.map(t => t.id === action.payload.id ?{\r\n                ...t,\r\n                entityStatus:action.payload.entityStatus\r\n            }:t)]\r\n\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\n//Thunk\r\nexport const getTodolists = (): ThunkType => async dispatch => {\r\n    try {\r\n        const response = await todolistAPI.getTodolists()\r\n        dispatch(setTodolists(response))\r\n        dispatch(setInitializedApp(true))\r\n        response.forEach((ts)=>{\r\n            dispatch(getTasks(ts.id))\r\n        })\r\n    } catch (e:any){\r\n        dispatch(setInitializedApp(true))\r\n        handleServerNetworkError(dispatch,e.message)\r\n    }\r\n\r\n}\r\nexport const CreateTodolist = (title: string): ThunkType => async dispatch => {\r\n    try{\r\n        dispatch(setOperationStatus(\"loading\"))\r\n        const response = await todolistAPI.createTodolist(title)\r\n        if (response.resultCode === resultCodes.success) {\r\n            //dispatch(getTodolists())}\r\n            dispatch(addTodoListAC(title, response.data.item.id))\r\n            dispatch(setOperationStatus(\"succeeded\"))\r\n        } else {\r\n            handleServerAppError<{item:TodolistType}>(dispatch,response)\r\n        }\r\n    }\r\n    catch (e:any) {\r\n        handleServerNetworkError(dispatch,e.message)\r\n    }\r\n\r\n}\r\nexport const removeTodolist = (todolistID: string): ThunkType => async dispatch => {\r\n    dispatch(changeTodolistEntityStatusAC(todolistID,\"loading\"))\r\n    dispatch(setOperationStatus(\"loading\"))\r\n    const response = await todolistAPI.removeTodolist(todolistID)\r\n    if (response.resultCode === resultCodes.success) {\r\n        //dispatch(getTodolists())\r\n        dispatch(removeTodoListAC(todolistID))\r\n        dispatch(setOperationStatus(\"succeeded\"))\r\n    }\r\n}\r\nexport const renameTodolist = (todolistID: string, title: string): ThunkType => async dispatch => {\r\n    dispatch(setOperationStatus(\"loading\"))\r\n    const response = await todolistAPI.renameTodolist(todolistID, title)\r\n    if (response.resultCode === resultCodes.success) {\r\n        //dispatch(getTodolists())\r\n        dispatch(renameTodoListAC(todolistID, title))\r\n        dispatch(setOperationStatus(\"succeeded\"))\r\n    }\r\n}\r\n","type InitialStateType = {\r\n    isDarkTheme: boolean\r\n}\r\ntype ToggleTheme = {\r\n    type:'TOGGLE-THEME'\r\n    isDarkTheme:boolean\r\n}\r\nexport  type ThemeActionsTypes = ToggleTheme\r\n\r\nexport function themeReducer(state:InitialStateType = {isDarkTheme:true}, action: ThemeActionsTypes)  {\r\n    switch (action.type) {\r\n        case 'TOGGLE-THEME': {\r\n            return {\r\n                ...state,\r\n                isDarkTheme:action.isDarkTheme\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const toggleTheme = (isDarkTheme:boolean):ToggleTheme => {\r\n    return {type:\"TOGGLE-THEME\",isDarkTheme}\r\n}\r\n","import {UiReducerActionsTypes} from \"./ui-actions-types\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    initializeStatus: boolean\r\n    operationStatus: RequestStatusType\r\n    progress: number\r\n    error: string | null\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    initializeStatus: false,\r\n    operationStatus: \"idle\",\r\n    progress: 0,\r\n    error: null\r\n}\r\n\r\nexport function uiReducer(state: InitialStateType = initialState, action: UiReducerActionsTypes): InitialStateType {\r\n    switch (action.type) {\r\n        case 'UI/SET-INITIALIZED-APP':\r\n            return {\r\n                ...state,\r\n                initializeStatus: action.initializeStatus\r\n            }\r\n        case 'UI/SET-PROGRESS':\r\n            return {\r\n                ...state,\r\n                progress: action.progress\r\n            }\r\n        case \"UI/SET-OPERATION-STATUS\":\r\n            return {\r\n                ...state,\r\n                operationStatus: action.operationStatus\r\n            }\r\n        case \"UI/SET-Error\":\r\n            return {\r\n                ...state,\r\n                error:action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import {ThunkType} from \"../../store/store\";\r\nimport {AuthReducerActionsTypes} from \"./auth-actions-types\";\r\nimport {setInitializedApp, setOperationStatus, setStatusProgress} from \"../ui-reducer/ui-actions\";\r\nimport {authAPI, LoginParamsType} from \"../../../api/api\";\r\nimport {resultCodes} from \"../../../definitions/result-codes\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {createSlice} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n//type InitialStateType = typeof initialState\r\n\r\n\r\n const slice = createSlice({\r\n    name:'auth',\r\n    initialState:initialState,\r\n    reducers:{\r\n        setIsLoggedIn (state, action: AuthReducerActionsTypes) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\nexport const authReducer = slice.reducer\r\nconst {setIsLoggedIn} = slice.actions\r\n// export const authReducer = (state: InitialStateType = initialState, action: AuthReducerActionsTypes): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'login/SET-IS-LOGGED-IN':\r\n//             return {...state, isLoggedIn: action.value}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n\r\n// thunks\r\n\r\nexport const initializeApp = (): ThunkType => async dispatch => {\r\n\r\n    let timer: any\r\n    try {\r\n        let progress = 0\r\n         timer = setInterval(() => {\r\n            if (progress < 100) {\r\n                progress += 10\r\n                dispatch(setStatusProgress(progress))\r\n            } else {\r\n                clearInterval(timer)\r\n                dispatch(setInitializedApp(true))\r\n            }\r\n        }, 100)\r\n        const response = await authAPI.me()\r\n        if (response.resultCode === resultCodes.success) {\r\n            dispatch(setIsLoggedIn({value:true}))\r\n        } else {\r\n            dispatch(setIsLoggedIn({value:false}))\r\n        }\r\n    } catch (e: any) {\r\n\r\n    }\r\n}\r\n\r\nexport const login = (data: LoginParamsType): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setOperationStatus('loading'))\r\n        const response = await authAPI.login(data)\r\n        if (response.resultCode === resultCodes.success) {\r\n            dispatch(setIsLoggedIn({value:true}))\r\n            dispatch(setOperationStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError<{ userId: number }>(dispatch, response)\r\n            dispatch(setOperationStatus('failed'))\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(dispatch, e.message)\r\n        dispatch(setOperationStatus('failed'))\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setOperationStatus('loading'))\r\n        const response = await authAPI.logout()\r\n        if (response.resultCode === resultCodes.success) {\r\n\r\n            dispatch(setIsLoggedIn({value:false}))\r\n            dispatch(setOperationStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError<{}>(dispatch, response)\r\n            dispatch(setOperationStatus('failed'))\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(dispatch, e.message)\r\n        dispatch(setOperationStatus('failed'))\r\n    }\r\n}\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"../reducers/task-reducer/tasks-reducer\";\r\nimport {todoListsReducer} from \"../reducers/todolist-reducer/todolists-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {TodolistReducerActionsTypes} from \"../reducers/todolist-reducer/todolist-actions-types\";\r\nimport {TaskReducerActionsTypes} from \"../reducers/task-reducer/tasks-actions-types\";\r\nimport {ThemeActionsTypes, themeReducer} from \"../reducers/theme-reducer/theme-reducer\";\r\nimport {uiReducer} from \"../reducers/ui-reducer/ui-reducer\";\r\nimport {UiReducerActionsTypes} from \"../reducers/ui-reducer/ui-actions-types\";\r\nimport {AuthReducerActionsTypes} from \"../reducers/auth-reducer/auth-actions-types\";\r\nimport {authReducer} from \"../reducers/auth-reducer/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nexport type GlobalStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AllActionsType =\r\n    | TodolistReducerActionsTypes\r\n    | TaskReducerActionsTypes\r\n    | ThemeActionsTypes\r\n    | UiReducerActionsTypes\r\n    | AuthReducerActionsTypes\r\n\r\nexport type ThunkType = ThunkAction<void, GlobalStateType, unknown, AllActionsType>\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    ui:uiReducer,\r\n    theme: themeReducer,\r\n    auth: authReducer,\r\n})\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware:getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {Dispatch} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AllActionsType, GlobalStateType, ThunkType} from \"../../../redux/store/store\";\r\nimport {setUiError} from \"../../../redux/reducers/ui-reducer/ui-actions\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector((state: GlobalStateType) => state.ui.error)\r\n    const dispatch = useDispatch<Dispatch<AllActionsType|ThunkType>>()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setUiError(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {Dispatch} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AllActionsType, GlobalStateType, ThunkType} from \"../../redux/store/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {login} from \"../../redux/reducers/auth-reducer/auth-reducer\";\r\nimport {ErrorSnackbar} from \"../common/ErrorSnackbar/ErrorSnackbar\";\r\nimport {LoginParamsType} from \"../../api/api\";\r\n\r\n\r\nexport const Login = React.memo(() => {\r\n    const dispatch = useDispatch<Dispatch<AllActionsType | ThunkType>>()\r\n\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'The password cannot be shorter than 3 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(login(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <Grid container\r\n              display={\"flex\"}\r\n              alignItems={\"center\"}\r\n              justifyContent={'center'}\r\n              style={{minHeight: \"100vh\", backgroundColor: isDarkTheme ? \"#484e50\" : \"rgba(96,151,225,0.37)\"}}\r\n        >\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                                <div>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                                <div>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}/>}\r\n                            />\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}\r\n                                disabled={!formik.isValid || !formik.dirty}\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                    <ErrorSnackbar/>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport s from \"./PageNotFound.module.css\"\r\n\r\n\r\nexport const PageNotFound = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <header className={s.topHeader}>\r\n            </header>\r\n            <div>\r\n                <div className={s.starsec}></div>\r\n                <div className={s.starthird}></div>\r\n                <div className={s.starfourth}></div>\r\n                <div className={s.starfifth}></div>\r\n            </div>\r\n\r\n\r\n            <div className={s.lamp__wrap}>\r\n                <div className={s.lamp}>\r\n                    <div className={s.cable}></div>\r\n                    <div className={s.cover}></div>\r\n                    <div className={s.inCover}>\r\n                        <div className={s.bulb}></div>\r\n                    </div>\r\n                    <div className={s.light}></div>\r\n                </div>\r\n            </div>\r\n\r\n            <section className={s.error}>\r\n\r\n                <div className={s.error__content}>\r\n                    <div className={s.error__message}>\r\n                        <h1 className={s.message__title}>Page Not Found</h1>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </section>\r\n\r\n        </div>\r\n    )\r\n}","import {createTheme} from \"@mui/material\";\r\n\r\nexport const lightTheme = createTheme({\r\n    palette: {\r\n        mode: \"light\",\r\n        primary: {\r\n            main: \"#1a72e7\",\r\n        },\r\n        secondary: {\r\n            main: \"#0b2877\",\r\n        },\r\n    },\r\n    typography: {\r\n        button: {\r\n            textTransform: \"none\"\r\n        }\r\n    },\r\n    components: {\r\n        MuiContainer: {\r\n            defaultProps: {\r\n                maxWidth: false,\r\n\r\n            },\r\n        },\r\n        MuiPaper: {\r\n            styleOverrides: {\r\n                elevation8: {\r\n                    position: \"relative\",\r\n                    minHeight: \"500px\",\r\n                    padding: \"18px\",\r\n                    width: \"300px\",\r\n                },\r\n                elevation1:{\r\n                    margin:\"0 0 5px 0\",\r\n                    backgroundColor:\"#c2d7f3\"\r\n                }\r\n            },\r\n        },\r\n        MuiButton: {\r\n            defaultProps: {\r\n                sx: {\r\n                    color: \"white\",\r\n                    '&:hover': {\r\n                        backgroundColor: \"rgb(11,40,119)\",\r\n                    }\r\n                },\r\n\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nexport const darkTheme = createTheme({\r\n    palette: {\r\n        mode: \"dark\",\r\n        primary: {\r\n            main: \"#594948\",\r\n        },\r\n        secondary: {\r\n            main: \"#333335\",\r\n        },\r\n    },\r\n    typography: {\r\n        button: {\r\n            textTransform: \"none\"\r\n        }\r\n    },\r\n    components: {\r\n\r\n        MuiContainer: {\r\n            defaultProps: {\r\n                maxWidth: false,\r\n            },\r\n        },\r\n        MuiPaper: {\r\n            styleOverrides: {\r\n                elevation8: {\r\n                    position: \"relative\",\r\n                    minHeight: \"500px\",\r\n                    padding: \"18px\",\r\n                    width: \"300px\",\r\n                },\r\n                elevation1:{\r\n                    margin:\"0 0 5px 0\",\r\n                }\r\n            }\r\n        },\r\n        MuiListItem: {\r\n            defaultProps: {\r\n                sx: {\r\n                    justifyContent: \"space-between\",\r\n                }\r\n            }\r\n        },\r\n        MuiButton: {\r\n            defaultProps: {\r\n                sx: {\r\n                    color: \"white\",\r\n                    '&:hover': {\r\n                        backgroundColor: \"rgb(62, 51, 50)\",\r\n                    }\r\n                },\r\n\r\n            },\r\n        },\r\n    }\r\n});","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {RequestStatusType} from \"../../../redux/reducers/ui-reducer/ui-reducer\";\r\nimport {AddBoxOutlined} from \"@mui/icons-material\";\r\n\r\n\r\ntype AddItemInputType = {\r\n    id?:string\r\n    addItem: (title: string,id?:string) => void\r\n    entityStatus?: RequestStatusType\r\n    placeHolder:string\r\n}\r\n\r\nexport const AddItemInput = React.memo(function ({id,addItem, entityStatus,placeHolder}: AddItemInputType) {\r\n    console.log(\"form\")\r\n    const [newTaskTittle, setNewTaskTittle] = useState(\"\")\r\n    const [error, setError] = useState<string>(\"\")\r\n\r\n    const addItemHandler = useCallback(() => {\r\n        const trimmedTitle = newTaskTittle.trim()\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle,id)\r\n        } else {\r\n            setError(\"Обязательное поле\")\r\n        }\r\n        setNewTaskTittle(\"\")\r\n    }, [addItem, newTaskTittle,id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTittle(e.currentTarget.value);\r\n        setError(\"\")\r\n    }, [])\r\n\r\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler()\r\n        }\r\n    }, [addItemHandler])\r\n\r\n    return (\r\n        <div style={{display: \"flex\",justifyContent: \"space-between\",alignItems:\"center\"}}>\r\n            <TextField\r\n                disabled={entityStatus === \"loading\"}\r\n                variant={\"outlined\"}\r\n                label={placeHolder}\r\n                size={\"small\"}\r\n                error={!!error}\r\n                helperText={error}\r\n                value={newTaskTittle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}/>\r\n\r\n            <IconButton\r\n                disabled={entityStatus === \"loading\"}\r\n                size={\"small\"}\r\n                onClick={addItemHandler}\r\n            >\r\n                <AddBoxOutlined/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport {TextField, Typography} from \"@mui/material\";\r\nimport {Variant} from \"@mui/material/styles/createTypography\";\r\nimport {Edit} from \"@mui/icons-material\";\r\n\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    variant: Variant\r\n    renameItem: (title: string) => void\r\n    className?: string\r\n}\r\n\r\nexport const EditableSpan = React.memo(\r\n    function ({\r\n                  title,\r\n                  variant,\r\n                  className,\r\n                  renameItem,\r\n              }: EditableSpanType) {\r\n        console.log(\"editable_span\")\r\n\r\n\r\n        const [editMode, setEditMode] = useState(false)\r\n        const [input, setInput] = useState(\" \") // записываем пустую, но сетаем тайтл реальный в колбэке\r\n\r\n        const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n            setInput(e.currentTarget.value), [setInput])\r\n\r\n         const onDoubleClickHandler = useCallback(() => {\r\n            setEditMode(!editMode);\r\n            setInput(title)\r\n        }, [editMode, title])\r\n\r\n        const onBlurHandler = useCallback(() => {\r\n            setEditMode(!editMode)\r\n            renameItem(input)\r\n        }, [editMode, input, renameItem])\r\n\r\n        const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(!editMode)\r\n                renameItem(input)\r\n            }\r\n        }, [editMode, input, renameItem])\r\n\r\n        return editMode\r\n            ? <TextField\r\n                size={\"small\"}\r\n                value={input}\r\n                onChange={onChangeHandler}\r\n                onBlur={onBlurHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                autoFocus={true}/>\r\n            : <Typography\r\n                onDoubleClick={onDoubleClickHandler}\r\n                width={\"100%\"}\r\n                align={\"left\"}\r\n                noWrap\r\n                component={\"div\"}\r\n                variant={variant}\r\n                className={className}\r\n            >\r\n                <div style={{\r\n                    width:\"100%\",\r\n                    display:\"flex\",\r\n                    justifyContent:\"space-between\"\r\n                }}>\r\n                    <Typography noWrap>\r\n                        {title}\r\n                    </Typography>\r\n\r\n                </div>\r\n            </Typography>\r\n\r\n\r\n    })","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../common/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../api/api\";\r\nimport {Checkbox, IconButton, ListItem} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {RequestStatusType} from \"../../redux/reducers/ui-reducer/ui-reducer\";\r\n\r\n\r\ntype TaskItemType = {\r\n    todoListID: string\r\n    task: TaskType\r\n    entityTaskStatus: RequestStatusType\r\n    removeTask: (todolistID: string, taskID: string) => void\r\n    renameTask: (taskID: string, todolistID: string, newTitle: string) => void\r\n    changeTaskStatus: (todolistID: string, taskID: string, status: TaskStatuses) => void\r\n}\r\n\r\nexport const TaskItem = React.memo(({\r\n                                        task,\r\n                                        removeTask,\r\n                                        renameTask,\r\n                                        entityTaskStatus,\r\n                                        changeTaskStatus,\r\n                                        todoListID,\r\n                                    }: TaskItemType) => {\r\n\r\n        const renameTaskHandler = useCallback((newTitle: string) => {\r\n            renameTask(task.id, todoListID, newTitle)\r\n        }, [task.id, todoListID, renameTask])\r\n\r\n        const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            const isDoneValue = e.currentTarget.checked\r\n            changeTaskStatus(\r\n                todoListID, task.id, isDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n\r\n        }, [task.id, todoListID, changeTaskStatus])\r\n\r\n        const removeTaskHandler = useCallback(() => {\r\n            removeTask(todoListID, task.id)\r\n        }, [task.id, todoListID, removeTask])\r\n\r\n        return (\r\n            <ListItem key={task.id} >\r\n\r\n                    <Checkbox\r\n                        size={\"small\"}\r\n                        checked={!!task.status}\r\n                        onChange={onChangeStatusHandler}\r\n                    />\r\n                    <EditableSpan\r\n                        variant={\"body2\"}\r\n                        renameItem={renameTaskHandler}\r\n                        title={task.title}/>\r\n\r\n                <IconButton\r\n                    size={\"small\"}\r\n                    disabled={entityTaskStatus === \"loading\"}\r\n                    onClick={removeTaskHandler}\r\n                ><Delete/></IconButton>\r\n            </ListItem>)\r\n    }\r\n)\r\n","import {useDispatch} from \"react-redux\";\r\nimport {Dispatch, useCallback, useMemo} from \"react\";\r\nimport {AllActionsType, ThunkType} from \"../redux/store/store\";\r\nimport {addTask, removeTask, updateTask} from \"../redux/reducers/task-reducer/tasks-reducer\";\r\nimport {TaskStatuses} from \"../api/api\";\r\n\r\nexport const useTaskCRUD = () =>{\r\n    const dispatch = useDispatch<Dispatch<AllActionsType | ThunkType>>()\r\n\r\n    const handleTaskRemove = useCallback((todolistID: string, taskID: string) => {\r\n        dispatch(removeTask(todolistID, taskID))\r\n    }, [dispatch])\r\n\r\n    const handleTaskAdd = useCallback((title: string,todolistID?:string) => {\r\n        dispatch(addTask(todolistID!, title))\r\n    }, [dispatch])\r\n\r\n    const handleTaskRename = useCallback((taskID: string, todolistID: string, title: string) => {\r\n        dispatch(updateTask(todolistID, taskID, {title}))\r\n    }, [dispatch])\r\n\r\n    const handleTaskStatusChange = useCallback((todolistID: string, taskID: string, status: TaskStatuses) => {\r\n        dispatch(updateTask(todolistID, taskID, {status}))\r\n    }, [dispatch])\r\n\r\nreturn useMemo(\r\n    ()=>({\r\n        handleTaskRemove,\r\n        handleTaskAdd,\r\n        handleTaskRename,\r\n        handleTaskStatusChange,\r\n    }),\r\n    [\r\n        handleTaskRemove,\r\n        handleTaskAdd,\r\n        handleTaskRename,\r\n        handleTaskStatusChange,\r\n    ])\r\n}\r\n\r\n\r\n","import React, {useCallback, useMemo} from \"react\";\r\nimport {AddItemInput} from \"../common/AddItemInput/AddItemInput\";\r\nimport {EditableSpan} from \"../common/EditableSpan/EditableSpan\";\r\nimport {FilterValuesType} from \"../../redux/reducers/todolist-reducer/todolists-reducer\";\r\nimport {TaskItem} from \"../taskItem/TaskItem\";\r\nimport {TaskType} from \"../../api/api\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Box, Button, ButtonGroup, IconButton, List, Paper} from \"@mui/material\";\r\nimport {RequestStatusType} from \"../../redux/reducers/ui-reducer/ui-reducer\";\r\nimport {tasksForRender} from \"../../utils\";\r\nimport {useTaskCRUD} from \"../../hooks/useTaskCRUD\";\r\nimport {useTasksFilter} from \"../../hooks/useTasksFilter\";\r\n\r\ntype TodolistType = {\r\n    todolistID: string\r\n    entityStatus: RequestStatusType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTodolist: (todoListID: string) => void\r\n    renameTodolist: (todoListID: string, newTitle: string) => void\r\n    filterTdl: FilterValuesType\r\n}\r\n\r\n\r\nconst Todolist = React.memo(function ({\r\n                                          todolistID,\r\n                                          entityStatus,\r\n                                          title,\r\n                                          tasks,\r\n                                          removeTodolist,\r\n                                          renameTodolist,\r\n                                          filterTdl,\r\n                                      }: TodolistType) {\r\n\r\n    const {handleTaskRemove, handleTaskRename, handleTaskStatusChange, handleTaskAdd} = useTaskCRUD()\r\n    const {handleFilterAllClick, handleFilterCompletedClick, handleFilterActiveClick} = useTasksFilter(todolistID)\r\n\r\n    const renameTodoList = useCallback((newTitle: string) => {\r\n        renameTodolist(todolistID, newTitle)\r\n    }, [renameTodolist, todolistID])\r\n\r\n    const tasksJSX = useMemo(() => tasksForRender(tasks, filterTdl).map(task => {\r\n            console.log(`${task.title} + ${task.id} `)\r\n            return (\r\n                <Paper key={task.id}>\r\n                    <TaskItem\r\n                        entityTaskStatus={task.entityTaskStatus!}\r\n                        key={task.id}\r\n                        removeTask={handleTaskRemove}\r\n                        renameTask={handleTaskRename}\r\n                        changeTaskStatus={handleTaskStatusChange}\r\n                        task={task}\r\n                        todoListID={todolistID}\r\n                    />\r\n                </Paper>\r\n            )\r\n        }\r\n    ), [handleTaskStatusChange, filterTdl, handleTaskRemove, handleTaskRename, todolistID, tasks])\r\n\r\n\r\n    const buttonStatusClass = useCallback((filter: FilterValuesType) =>\r\n        filter === filterTdl ? \"secondary\" : \"primary\", [filterTdl])\r\n\r\n    return (\r\n        <>\r\n            <Box style={{marginBottom:\"15px\"}}>\r\n                <EditableSpan\r\n                    variant={\"h6\"}\r\n                    title={title}\r\n                    renameItem={renameTodoList}\r\n                />\r\n            </Box>\r\n            <AddItemInput\r\n                id={todolistID}\r\n                placeHolder={\"New task\"}\r\n                addItem={handleTaskAdd}\r\n                entityStatus={entityStatus}\r\n            />\r\n            <List>\r\n                {tasksJSX}\r\n            </List>\r\n            <div style={{bottom: \"15px\", position: \"absolute\"}}>\r\n                <ButtonGroup size={\"small\"} variant={\"contained\"}>\r\n                    <Button onClick={handleFilterAllClick} color={buttonStatusClass(\"all\")}>\r\n                        All\r\n                    </Button>\r\n                    <Button onClick={handleFilterActiveClick} color={buttonStatusClass(\"active\")}>\r\n                        Active\r\n                    </Button>\r\n                    <Button onClick={handleFilterCompletedClick} color={buttonStatusClass(\"completed\")}>\r\n                        Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n                <IconButton\r\n                    style={{marginLeft: \"86px\"}}\r\n                    disabled={entityStatus === \"loading\"}\r\n                    size={\"small\"}\r\n                    onClick={() => {\r\n                        removeTodolist(todolistID)\r\n                    }}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Todolist\r\n\r\n\r\n","import {Dispatch, useCallback, useMemo} from \"react\";\r\nimport {changeFilterTodoListAC} from \"../redux/reducers/todolist-reducer/todolist-actions\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AllActionsType, ThunkType} from \"../redux/store/store\";\r\n\r\n\r\nexport const useTasksFilter = (todolistID:string) =>{\r\n    const dispatch = useDispatch<Dispatch<AllActionsType | ThunkType>>()\r\n    const handleFilterAllClick = useCallback(() => {\r\n        dispatch(changeFilterTodoListAC(\"all\", todolistID))\r\n    }, [dispatch, todolistID])\r\n\r\n    const handleFilterActiveClick = useCallback(() => {\r\n        dispatch(changeFilterTodoListAC(\"active\", todolistID))\r\n    }, [dispatch, todolistID])\r\n\r\n    const handleFilterCompletedClick = useCallback(() => {\r\n        dispatch(changeFilterTodoListAC(\"completed\", todolistID))\r\n    }, [dispatch, todolistID])\r\n\r\n    return useMemo(\r\n        ()=>({\r\n            handleFilterAllClick,\r\n            handleFilterActiveClick,\r\n            handleFilterCompletedClick,\r\n        }),\r\n        [handleFilterAllClick,\r\n            handleFilterActiveClick,\r\n            handleFilterCompletedClick,\r\n        ])\r\n}","import {TaskStatuses, TaskType} from \"../api/api\";\r\nimport {FilterValuesType} from \"../redux/reducers/todolist-reducer/todolists-reducer\";\r\n\r\nexport const tasksForRender = (tasks: TaskType[], filterTdl: FilterValuesType) => {\r\n    if (filterTdl === \"active\") {\r\n        return tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filterTdl === \"completed\") {\r\n        return tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    return tasks\r\n}","import IconButton from \"@mui/material/IconButton\";\r\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\r\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\r\nimport React from \"react\";\r\n\r\ntype ToggleThemeType = {\r\n    onClickHandler: () => void\r\n    isDarkTheme: boolean\r\n}\r\n\r\nexport const ToggleTheme: React.FC<ToggleThemeType> = ({onClickHandler,isDarkTheme}) => {\r\n\r\n\r\n    return (\r\n        <IconButton\r\n            onClick={onClickHandler}\r\n            color=\"inherit\"\r\n        >\r\n            {isDarkTheme ? (\r\n                <Brightness7Icon/>\r\n            ) : (\r\n                <Brightness4Icon/>\r\n            )}\r\n        </IconButton>\r\n    )\r\n}","import {AddItemInput} from \"../common/AddItemInput/AddItemInput\";\r\nimport {ErrorSnackbar} from \"../common/ErrorSnackbar/ErrorSnackbar\";\r\nimport React, {Dispatch, memo, useCallback, useEffect, useMemo} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AllActionsType, GlobalStateType, ThunkType} from \"../../redux/store/store\";\r\nimport {toggleTheme} from \"../../redux/reducers/theme-reducer/theme-reducer\";\r\nimport Todolist from \"../todolist/Todolist\";\r\nimport {\r\n    CreateTodolist,\r\n    getTodolists,\r\n    removeTodolist,\r\n    renameTodolist\r\n} from \"../../redux/reducers/todolist-reducer/todolists-reducer\";\r\nimport {ToggleTheme} from \"../common/ToggleTheme/ToggleTheme\";\r\nimport {logout} from \"../../redux/reducers/auth-reducer/auth-reducer\";\r\nimport {AppBar, Box, Container, Grid, IconButton, LinearProgress, Paper, Toolbar, Typography} from \"@mui/material\";\r\nimport {Logout} from \"@mui/icons-material\";\r\n\r\n\r\nexport const Main = memo( () => {\r\n    const dispatch = useDispatch<Dispatch<AllActionsType | ThunkType>>()\r\n\r\n    const isLoggedIn = useSelector((state: GlobalStateType) => state.auth.isLoggedIn)\r\n\r\n    const operationStatus = useSelector((state: GlobalStateType) => state.ui.operationStatus)\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n    const todoLists = useSelector((state: GlobalStateType) => state.todoLists)\r\n    const tasks = useSelector((state: GlobalStateType) => state.tasks)\r\n\r\n\r\n    const toggleThemeHandler = useCallback (() => {\r\n        dispatch(toggleTheme(!isDarkTheme))\r\n    },[dispatch,isDarkTheme])\r\n    const logoutHandler = useCallback (() => {\r\n        dispatch(logout())\r\n    },[dispatch])\r\n\r\n\r\n\r\n    //\r\n    //\r\n    //TODOLIST\r\n    const addTodoListHandler = useCallback(function (title: string) {\r\n        dispatch(CreateTodolist(title))\r\n    }, [dispatch])\r\n\r\n    const removeTodoListHandler = useCallback((todolistID: string) => {\r\n        dispatch(removeTodolist(todolistID))\r\n    }, [dispatch])\r\n\r\n    const renameTodolistHandler = useCallback((todolistID: string, newTitle: string) => {\r\n        dispatch(renameTodolist(todolistID, newTitle))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolists())\r\n    }, [dispatch])\r\n\r\n\r\n    const todoListRender = useMemo( ()=> {\r\n       return  todoLists.map((tdl) => {\r\n                console.log(`ListName: ${tdl.title}`)\r\n                return (\r\n                    <Grid item key={tdl.id}>\r\n                        <Paper elevation={8}>\r\n                            <Todolist\r\n                                entityStatus={tdl.entityStatus}\r\n                                key={tdl.id}\r\n                                todolistID={tdl.id}\r\n                                title={tdl.title}\r\n                                tasks={tasks[tdl.id]}\r\n                                removeTodolist={removeTodoListHandler}\r\n                                renameTodolist={renameTodolistHandler}\r\n                                filterTdl={tdl.filter}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>)\r\n            }\r\n        )\r\n    },[todoLists,tasks,renameTodolistHandler,removeTodoListHandler])\r\n\r\n    return (\r\n        <div style={{minHeight: \"100vh\", backgroundColor: isDarkTheme ? \"#484e50\" : \"rgba(96,151,225,0.37)\"}}>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar sx={{justifyContent: 'space-between'}}>\r\n                    <Box>\r\n                        {/*<IconButton>*/}\r\n                        {/*    <Menu />*/}\r\n                        {/*</IconButton>*/}\r\n                        <ToggleTheme onClickHandler={toggleThemeHandler} isDarkTheme={isDarkTheme}/>\r\n                    </Box>\r\n                    <Typography>\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn && <IconButton onClick={logoutHandler}><Logout/></IconButton>}\r\n                </Toolbar>\r\n                <div style={{height: \"5px\"}}>\r\n                    {operationStatus === 'loading' && <LinearProgress/>}\r\n                </div>\r\n            </AppBar>\r\n                <Container>\r\n                    <Grid container style={{padding: \"20px 0 20px 0\"}}>\r\n                        <AddItemInput placeHolder={\"New todo\"} addItem={addTodoListHandler}/>\r\n                    </Grid>\r\n                    <Grid container spacing={2}>\r\n                        {todoListRender}\r\n                    </Grid>\r\n                </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n   )\r\n})","import React from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport CircularProgress, {CircularProgressProps} from '@mui/material/CircularProgress';\r\nimport {useSelector} from \"react-redux\";\r\nimport {GlobalStateType} from \"../../../redux/store/store\";\r\n\r\nexport function CircularProgressWithLabel(props: CircularProgressProps & { value: number }) {\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n    return (\r\n        <Box style={{minHeight: \"100vh\", backgroundColor: isDarkTheme ? \"#484e50\" : \"rgba(96,151,225,0.37)\"}}\r\n            sx={{\r\n            top: 0,\r\n            left: 0,\r\n            bottom: 0,\r\n            right: 0,\r\n            position: 'absolute',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        }}>\r\n            <CircularProgress variant=\"determinate\" {...props} />\r\n            <Box sx={{\r\n                top: 0,\r\n                left: 0,\r\n                bottom: 0,\r\n                right: 0,\r\n                position: 'absolute',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n            }}>\r\n                <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\r\n                    {`${Math.round(props.value)}%`}\r\n                </Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}","import React, {Dispatch, useCallback, useEffect, useLayoutEffect} from 'react';\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AllActionsType, GlobalStateType, ThunkType} from \"./redux/store/store\";\r\nimport ThemeProvider from \"@mui/material/styles/ThemeProvider\";\r\nimport {darkTheme, lightTheme} from \"./themes/themes\";\r\nimport {Main} from \"./Components/main/Main\";\r\nimport {Login} from \"./Components/login/Login\";\r\nimport {toggleTheme} from \"./redux/reducers/theme-reducer/theme-reducer\";\r\nimport {initializeApp} from \"./redux/reducers/auth-reducer/auth-reducer\";\r\nimport {CircularProgressWithLabel} from \"./Components/common/CircularProgress/CircularProgress\";\r\n\r\n\r\nconst App = React.memo(function () {\r\n\r\n    const dispatch = useDispatch<Dispatch<AllActionsType | ThunkType>>()\r\n\r\n    const isDarkTheme = useSelector((state: GlobalStateType) => state.theme.isDarkTheme)\r\n    const isLoggedIn = useSelector((state: GlobalStateType) => state.auth.isLoggedIn)\r\n    const initializeStatus = useSelector((state: GlobalStateType) => state.ui.initializeStatus)\r\n    const progress = useSelector((state: GlobalStateType) => state.ui.progress)\r\n\r\n    const setLocalStorageThemeHandler = useCallback((isDarkTheme: boolean) => {\r\n        localStorage.setItem(\"isDarkTheme\", JSON.stringify(isDarkTheme))\r\n    }, [])\r\n\r\n    const getLocalStorageThemeHandler = useCallback(() => {\r\n        let localTheme = localStorage.getItem(\"isDarkTheme\")\r\n        localTheme === null\r\n            ? dispatch(toggleTheme(true))\r\n            : dispatch(toggleTheme(localTheme && JSON.parse(localTheme)))\r\n    }, [dispatch])\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        getLocalStorageThemeHandler()\r\n    }, [getLocalStorageThemeHandler])\r\n    useEffect(() => {\r\n        setLocalStorageThemeHandler(isDarkTheme)\r\n    }, [setLocalStorageThemeHandler, isDarkTheme])\r\n    useLayoutEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [dispatch])\r\n\r\n    if (!initializeStatus) {\r\n        return (\r\n            <ThemeProvider theme={isDarkTheme ? darkTheme : lightTheme}>\r\n                <CircularProgressWithLabel value={progress}/> )\r\n            </ThemeProvider>)\r\n    } else {\r\n        return (\r\n            <ThemeProvider theme={isDarkTheme ? darkTheme : lightTheme}>\r\n                    {isLoggedIn\r\n                        ? <Main/>\r\n                        : <Login/>}\r\n            </ThemeProvider>\r\n        )\r\n    }\r\n})\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store/store\";\r\nimport {HashRouter, Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from \"./Components/login/Login\";\r\nimport {PageNotFound} from \"./Components/utils/PageNotFound/PageNotFound\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <Routes>\r\n                <Route path={\"/todolist\"} element={<App/>}/>\r\n                <Route path={\"/\"} element={<App/>}/>\r\n                <Route path={\"/login\"} element={<Login/>}/>\r\n                <Route path={\"/404\"} element={<PageNotFound/>} />\r\n                <Route path={\"/*\"} element={<Navigate to={\"/404\"}/>}/>\r\n            </Routes>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PageNotFound_container__22tru\",\"top-header\":\"PageNotFound_top-header__VOBLk\",\"starsec\":\"PageNotFound_starsec__1Qc2O\",\"animStar\":\"PageNotFound_animStar__2xinE\",\"starthird\":\"PageNotFound_starthird__3RPGj\",\"starfourth\":\"PageNotFound_starfourth__3Xbpp\",\"starfifth\":\"PageNotFound_starfifth__1NHhQ\",\"clearfix\":\"PageNotFound_clearfix__3Nq5S\",\"error\":\"PageNotFound_error__2CbIC\",\"error__overlay\":\"PageNotFound_error__overlay__ojbm9\",\"error__content\":\"PageNotFound_error__content__ai7Oa\",\"error__message\":\"PageNotFound_error__message__XqZPl\",\"message__title\":\"PageNotFound_message__title__zzBh9\",\"message__text\":\"PageNotFound_message__text__3BZO-\",\"error__nav\":\"PageNotFound_error__nav__1uVX_\",\"e-nav__form\":\"PageNotFound_e-nav__form__hQD8A\",\"e-nav__icon\":\"PageNotFound_e-nav__icon__2RZIa\",\"e-nav__link\":\"PageNotFound_e-nav__link__-6o6j\",\"error__social\":\"PageNotFound_error__social__1MWdO\",\"e-social__list\":\"PageNotFound_e-social__list__1XLFe\",\"e-social__icon\":\"PageNotFound_e-social__icon__1yEuw\",\"e-social__link\":\"PageNotFound_e-social__link__33Izi\",\"lamp\":\"PageNotFound_lamp__2c7sL\",\"move\":\"PageNotFound_move__1o_NF\",\"cable\":\"PageNotFound_cable__12BKO\",\"cover\":\"PageNotFound_cover__Elu8r\",\"in-cover\":\"PageNotFound_in-cover__1dqzv\",\"bulb\":\"PageNotFound_bulb__3IIyz\",\"light\":\"PageNotFound_light__1MnYY\",\"lamp__wrap\":\"PageNotFound_lamp__wrap__IevDU\"};"],"sourceRoot":""}